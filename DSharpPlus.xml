<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSharpPlus</name>
    </assembly>
    <members>
        <member name="T:DSharpPlus.AsyncEventHandler">
            <summary>
            Represents an asynchronous event handler.
            </summary>
            <returns>Event handling task.</returns>
        </member>
        <member name="T:DSharpPlus.AsyncEventHandler`1">
            <summary>
            Represents an asynchronous event handler.
            </summary>
            <typeparam name="T">Type of EventArgs for the event.</typeparam>
            <returns>Event handling task.</returns>
        </member>
        <member name="T:DSharpPlus.AsyncEvent">
            <summary>
            Represents an asynchronously-handled event.
            </summary>
        </member>
        <member name="T:DSharpPlus.AsyncEvent`1">
            <summary>
            Represents an asynchronously-handled event.
            </summary>
            <typeparam name="T">Type of EventArgs for this event.</typeparam>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.DebugLogger">
            <summary>
            Gets the instance of the logger for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.VersionString">
            <summary>
            Gets the string representing the version of D#+.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.CurrentApplication">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.Guilds">
            <summary>
            Gets the cached guilds for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.UserCache">
            <summary>
            Gets the cached users for this client.
            </summary>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Initializes this Discord API client.
            </summary>
            <param name="config">Configuration for this client.</param>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.GetCurrentApplicationAsync">
            <summary>
            Gets the current API application.
            </summary>
            <returns>Current API application.</returns>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.InitializeAsync">
            <summary>
            Initializes this client. This method fetches information about current user and application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.Dispose">
            <summary>
            Disposes this client.
            </summary>
        </member>
        <member name="T:DSharpPlus.BaseModule">
            <summary>
            Represents base for all DSharpPlus modules. To implement your own module, extend this class.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseModule.Client">
            <summary>
            Gets the instance of <see cref="T:DSharpPlus.DiscordClient"/> this module is attached to.
            </summary>
        </member>
        <member name="M:DSharpPlus.BaseModule.Setup(DSharpPlus.DiscordClient)">
            <summary>
            Initializes this module for given <see cref="T:DSharpPlus.DiscordClient"/> instance.
            </summary>
            <param name="client">Discord client to initialize for.</param>
        </member>
        <member name="T:DSharpPlus.EventArgs.DebugLogMessageEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DebugLogger.LogMessageReceived"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DebugLogMessageEventArgs.Level">
            <summary>
            Gets the level of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DebugLogMessageEventArgs.Application">
            <summary>
            Gets the name of the application which generated the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DebugLogMessageEventArgs.Message">
            <summary>
            Gets the sent message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DebugLogMessageEventArgs.Timestamp">
            <summary>
            Gets the timestamp of the message.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelCreateEventArgs.Channel">
            <summary>
            Gets the channel that was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the channel was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelDeleteEventArgs.Channel">
            <summary>
            Gets the channel that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelDeleteEventArgs.Guild">
            <summary>
            Gets the guild this channel belonged to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelPinsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs.Channel">
            <summary>
            Gets the channel in which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs.LastPinTimestamp">
            <summary>
            Gets the timestamp of the latest pin.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelUpdateEventArgs.ChannelAfter">
            <summary>
            Gets the post-update channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelUpdateEventArgs.ChannelBefore">
            <summary>
            Gets the pre-update channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occured.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ClientErrorEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ClientErrored"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ClientErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by the client.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ClientErrorEventArgs.EventName">
            <summary>
            Gets the name of the event that threw the exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DiscordEventArgs.Client">
            <summary>
            Gets the client that triggered the event.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.DmChannelCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.DmChannelCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DmChannelCreateEventArgs.Channel">
            <summary>
            Gets the direct message channel that was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.DmChannelDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.DmChannelDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DmChannelDeleteEventArgs.Channel">
            <summary>
            Gets the direct message channel that was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildBanAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildBanAdded"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanAddEventArgs.Member">
            <summary>
            Gets the member that was banned.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanAddEventArgs.Guild">
            <summary>
            Gets the guild this member was banned in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildBanRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildBanRemoved"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanRemoveEventArgs.Member">
            <summary>
            Gets the member that just got unbanned.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanRemoveEventArgs.Guild">
            <summary>
            Gets the guild this member was unbanned in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildCreateEventArgs.Guild">
            <summary>
            Gets the guild that was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildDeleteEventArgs.Guild">
            <summary>
            Gets the guild that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildDeleteEventArgs.Unavailable">
            <summary>
            Gets whether the guild is unavailable or not.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildEmojisUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs.EmojisAfter">
            <summary>
            Gets the list of emojis after the change.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs.EmojisBefore">
            <summary>
            Gets the list of emojis before the change.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occured.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildIntegrationsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildIntegrationsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildIntegrationsUpdateEventArgs.Guild">
            <summary>
            Gets the guild that had its integrations updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMemberAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMemberAdded"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberAddEventArgs.Member">
            <summary>
            Gets the member that was added.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberAddEventArgs.Guild">
            <summary>
            Gets the guild the member was added to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMemberRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMemberRemoved"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberRemoveEventArgs.Guild">
            <summary>
            Gets the guild the member was removed from.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberRemoveEventArgs.Member">
            <summary>
            Gets the member that was removed.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMembersChunkEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMembersChunked"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Guild">
            <summary>
            Gets the guild whose members were requested.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Members">
            <summary>
            Gets a collection containing the members in the received chunk.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMemberUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.RolesAfter">
            <summary>
            Gets a collection containing post-update roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.RolesBefore">
            <summary>
            Gets a collection containing pre-update roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.NicknameAfter">
            <summary>
            Gets the member's new nickname.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.NicknameBefore">
            <summary>
            Gets the member's old nickname.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.Member">
            <summary>
            Gets the member that was updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildRoleCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildRoleCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the role was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleCreateEventArgs.Role">
            <summary>
            Gets the role that was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildRoleDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildRoleDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the role was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleDeleteEventArgs.Role">
            <summary>
            Gets the role that was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildRoleUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs.RoleAfter">
            <summary>
            Gets the post-update role.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs.RoleBefore">
            <summary>
            Gets the pre-update role.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildUpdateEventArgs.Guild">
            <summary>
            Gets the guild that was updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.HeartbeatEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.Heartbeated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.HeartbeatEventArgs.Ping">
            <summary>
            Gets the round-trip time of the heartbeat.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.HeartbeatEventArgs.Timestamp">
            <summary>
            Gets the timestamp of the heartbeat.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.HeartbeatEventArgs.IntegrityChecksum">
            <summary>
            Gets the checksum of heartbeat's integrity.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageAcknowledgeEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageAcknowledged"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageAcknowledgeEventArgs.Message">
            <summary>
            Gets the message that was acknowledged.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageAcknowledgeEventArgs.Channel">
            <summary>
            Gets the channel for which the message was acknowledged.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessagesBulkDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs.Messages">
            <summary>
            Gets a collection of the deleted messages.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs.Channel">
            <summary>
            Gets the channel in which the deletion occured.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Message">
            <summary>
            Gets the message that was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Channel">
            <summary>
            Gets the channel this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Guild">
            <summary>
            Gets the guild this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Author">
            <summary>
            Gets the author of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.MentionedUsers">
            <summary>
            Gets the collection of mentioned users.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.MentionedRoles">
            <summary>
            Gets the collection of mentioned roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.MentionedChannels">
            <summary>
            Gets the collection of mentioned channels.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageDeleteEventArgs.Message">
            <summary>
            Gets the message that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageDeleteEventArgs.Channel">
            <summary>
            Gets the channel this message belonged to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageDeleteEventArgs.Guild">
            <summary>
            Gets the guild this message belonged to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionAdded"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Message">
            <summary>
            Gets the message for which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.User">
            <summary>
            Gets the user who created the reaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Emoji">
            <summary>
            Gets the emoji used for this reaction.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemoved"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Message">
            <summary>
            Gets the message for which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.User">
            <summary>
            Gets the users whose reaction was removed.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Emoji">
            <summary>
            Gets the emoji used for this reaction.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionsClearEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionsCleared"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionsClearEventArgs.Message">
            <summary>
            Gets the message for which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionsClearEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Message">
            <summary>
            Gets the message that was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Channel">
            <summary>
            Gets the channel this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Guild">
            <summary>
            Gets the guild this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Author">
            <summary>
            Gets the author of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MentionedUsers">
            <summary>
            Gets the collection of mentioned users.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MentionedRoles">
            <summary>
            Gets the collection of mentioned roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MentionedChannels">
            <summary>
            Gets the collection of mentioned channels.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.PresenceUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.PresenceUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Member">
            <summary>
            Gets the member whose presence was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Game">
            <summary>
            Gets the member's new game.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Status">
            <summary>
            Gets the member's status.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Guild">
            <summary>
            Gets the guild for which this event occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Roles">
            <summary>
            Gets the roles this member has.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.PresenceBefore">
            <summary>
            Gets the member's old presence.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ReadyEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.Ready"/> event.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketCloseEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.SocketClosed"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketCloseEventArgs.CloseCode">
            <summary>
            Gets the close code sent by remote host.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketCloseEventArgs.CloseMessage">
            <summary>
            Gets the close message sent by remote host.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketErrorEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.SocketErrored"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by websocket client.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.TypingStartEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.TypingStarted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.Channel">
            <summary>
            Gets the channel in which the indicator was triggered.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.User">
            <summary>
            Gets the user that started typing.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.StartedAt">
            <summary>
            Gets the date and time at which the user started typing.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UnknownEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.UnknownEvent"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UnknownEventArgs.EventName">
            <summary>
            Gets the event's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UnknownEventArgs.Json">
            <summary>
            Gets the event's data.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UserSettingsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.UserSettingsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSettingsUpdateEventArgs.User">
            <summary>
            Gets the user whose settings were updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UserSpeakingEventArgs">
            <summary>
            Represents arguments for UserSpeaking event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSpeakingEventArgs.User">
            <summary>
            Gets the users whose speaking state changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSpeakingEventArgs.SSRC">
            <summary>
            Gets the SSRC of the audio source.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSpeakingEventArgs.Speaking">
            <summary>
            Gets whether this user is speaking.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UserUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.UserUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserUpdateEventArgs.UserAfter">
            <summary>
            Gets the post-update user.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserUpdateEventArgs.UserBefore">
            <summary>
            Gets the pre-update user.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.VoiceReceiveEventArgs">
            <summary>
            Represents arguments for VoiceReceived events.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceReceiveEventArgs.SSRC">
            <summary>
            Gets the SSRC of the audio source.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceReceiveEventArgs.User">
            <summary>
            Gets the user that sent the audio data.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceReceiveEventArgs.Voice">
            <summary>
            Gets the received data.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceReceiveEventArgs.VoiceLength">
            <summary>
            Gets the length of the received data.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.VoiceServerUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs.Guild">
            <summary>
            Gets the guild for which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs.Endpoint">
            <summary>
            Gets the new voice endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs.VoiceToken">
            <summary>
            Gets the voice connection token.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.VoiceStateUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.User">
            <summary>
            Gets the user whose voice state was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.Channel">
            <summary>
            Gets the related voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.SessionId">
            <summary>
            Gets the ID of voice session.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.WebhooksUpdateEventArgs">
            <summary>
            Represents arguments to <see cref="E:DSharpPlus.DiscordClient.WebhooksUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.WebhooksUpdateEventArgs.Guild">
            <summary>
            Gets the guild that had its webhooks updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.WebhooksUpdateEventArgs.Channel">
            <summary>
            Gets the channel to which the webhook belongs to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketMessageEventArgs">
            <summary>
            Represents arguments for raw socket message events.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketMessageEventArgs.Message">
            <summary>
            Gets the received message.
            </summary>
        </member>
        <member name="T:DSharpPlus.DiscordClient">
            <summary>
            A Discord api wrapper
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ClientErrored">
            <summary>
            Fired whenever an error occurs within an event handler.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.SocketErrored">
            <summary>
            Fired whenever a WebSocket error occurs within the client.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.SocketOpened">
            <summary>
            Fired whenever WebSocket connection is established.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.SocketClosed">
            <summary>
            Fired whenever WebSocket connection is terminated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Ready">
            <summary>
            Fired when the client enters ready state.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Resumed">
            <summary>
            Fired whenever a session is resumed.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelCreated">
            <summary>
            Fired when a new channel is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.DmChannelCreated">
            <summary>
            Fired when a new direct message channel is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelUpdated">
            <summary>
            Fired when a channel is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelDeleted">
            <summary>
            Fired when a channel is deleted
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.DmChannelDeleted">
            <summary>
            Fired when a dm channel is deleted
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelPinsUpdated">
            <summary>
            Fired whenever a channel's pinned message list is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildCreated">
            <summary>
            Fired when the user joins a new guild.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildAvailable">
            <summary>
            Fired when a guild is becoming available.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildUpdated">
            <summary>
            Fired when a guild is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildDeleted">
            <summary>
            Fired when the user leaves or is removed from a guild.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildUnavailable">
            <summary>
            Fired when a guild becomes unavailable.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageCreated">
            <summary>
            Fired when a message is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.PresenceUpdated">
            <summary>
            Fired when a presence has been updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildBanAdded">
            <summary>
            Fired when a guild ban gets added
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildBanRemoved">
            <summary>
            Fired when a guild ban gets removed
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildEmojisUpdated">
            <summary>
            Fired when a guilds emojis get updated
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildIntegrationsUpdated">
            <summary>
            Fired when a guild integration is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMemberAdded">
            <summary>
            Fired when a new user joins a guild.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMemberRemoved">
            <summary>
            Fired when a user is removed from a guild (leave/kick/ban).
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMemberUpdated">
            <summary>
            Fired when a guild member is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildRoleCreated">
            <summary>
            Fired when a guild role is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildRoleUpdated">
            <summary>
            Fired when a guild role is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildRoleDeleted">
            <summary>
            Fired when a guild role is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageAcknowledged">
            <summary>
            Fired when message is acknowledged by the user.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageUpdated">
            <summary>
            Fired when a message is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageDeleted">
            <summary>
            Fired when a message is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessagesBulkDeleted">
            <summary>
            Fired when multiple messages are deleted at once.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.TypingStarted">
            <summary>
            Fired when a user starts typing in a channel.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.UserSettingsUpdated">
            <summary>
            Fired when the current user updates their settings.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.UserUpdated">
            <summary>
            Fired when properties about the user change.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.VoiceStateUpdated">
            <summary>
            Fired when someone joins/leaves/moves voice channels.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.VoiceServerUpdated">
            <summary>
            Fired when a guild's voice server is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMembersChunked">
            <summary>
            Fired in response to Gateway Request Guild Members.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.UnknownEvent">
            <summary>
            Fired when an unknown event gets received.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionAdded">
            <summary>
            Fired when a reaction gets added to a message.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionRemoved">
            <summary>
            Fired when a reaction gets removed from a message.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionsCleared">
            <summary>
            Fired when all reactions get removed from a message.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.WebhooksUpdated">
            <summary>
            Fired whenever webhooks update.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Heartbeated">
            <summary>
            Fired on received heartbeat ACK.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.GatewayVersion">
            <summary>
            Gets the gateway protocol version.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.GatewayUrl">
            <summary>
            Gets the gateway URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.ShardCount">
            <summary>
            Gets the total number of shards the bot is connected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.ShardId">
            <summary>
            Gets the currently connected shard ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.PrivateChannels">
            <summary>
            List of DM Channels
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Guilds">
            <summary>
            List of Guilds
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Ping">
            <summary>
            Gets the WS latency for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Presences">
            <summary>
            Gets the collection of presences held by this client.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordClient.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Initializes a new instance of DiscordClient.
            </summary>
            <param name="config">Specifies configuration parameters.</param>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SetWebSocketClient``1">
            <summary>
            Sets the WebSocket client implementation.
            </summary>
            <typeparam name="T">Type of the WebSocket client to use.</typeparam>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SetUdpClient``1">
            <summary>
            Sets the UDP client implementation.
            </summary>
            <typeparam name="T">Type of the UDP client to use.</typeparam>
        </member>
        <member name="M:DSharpPlus.DiscordClient.AddModule(DSharpPlus.BaseModule)">
            <summary>
            Adds a new module to the module list
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetModule``1">
            <summary>
            Gets a module from the module list by type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.ConnectAsync">
            <summary>
            Connects to the gateway
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.DisconnectAsync">
            <summary>
            Disconnects from the gateway
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetUserAsync(System.UInt64)">
            <summary>
            Gets a user
            </summary>
            <param name="user_id">Id of the user</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetChannelAsync(System.UInt64)">
            <summary>
            Gets a channel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendMessageAsync(DSharpPlus.Entities.DiscordChannel,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message
            </summary>
            <param name="channel"></param>
            <param name="content"></param>
            <param name="tts"></param>
            <param name="embed"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.CreateGuildAsync(System.String,System.String,System.IO.Stream,System.Nullable{DSharpPlus.Entities.VerificationLevel},System.Nullable{DSharpPlus.Entities.DefaultMessageNotifications})">
            <summary>
            Creates a guild. This requires the bot to be in less than 10 guilds total.
            </summary>
            <param name="name">Name of the guild.</param>
            <param name="region">Voice region of the guild.</param>
            <param name="icon">Stream containing the icon for the guild.</param>
            <param name="verification_level">Verification level for the guild.</param>
            <param name="default_message_notifications">Default message notification settings for the guild.</param>
            <returns>The created guild.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGuildAsync(System.UInt64)">
            <summary>
            Gets a guild
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetInviteByCodeAsync(System.String)">
            <summary>
            Gets an invite
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetConnectionsAsync">
            <summary>
            Gets a list of connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.ListRegionsAsync">
            <summary>
            Gets a list of regions
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetWebhookAsync(System.UInt64)">
            <summary>
            Gets a webhook
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetWebhookWithTokenAsync(System.UInt64,System.String)">
            <summary>
            Gets a webhook
            </summary>
            <param name="id"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.CreateDmAsync(DSharpPlus.Entities.DiscordUser)">
            <summary>
            Creates a dm
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.UpdateStatusAsync(DSharpPlus.Entities.DiscordGame,System.Nullable{DSharpPlus.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates current user's status
            </summary>
            <param name="game">Game you're playing</param>
            <param name="user_status"></param>
            <param name="idle_since"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetApplicationAsync(System.UInt64)">
            <summary>
            Gets information about specified API application.
            </summary>
            <param name="id">ID of the application.</param>
            <returns>Information about specified API application.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.EditCurrentUserAsync(System.String,System.IO.Stream)">
            <summary>
            Edits current user.
            </summary>
            <param name="username">New username.</param>
            <param name="avatar">New avatar.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SyncGuildsAsync(DSharpPlus.Entities.DiscordGuild[])">
            <summary>
            Requests guild sync for specified guilds. Guild sync sends information about members and presences for a given guild, and makes gateway dispatch additional events.
            
            This can only be done for user tokens.
            </summary>
            <param name="guilds">Guilds to send a sync request for.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.Dispose">
            <summary>
            Disposes your DiscordClient.
            </summary>
        </member>
        <member name="T:DSharpPlus.DiscordConfiguration">
            <summary>
            Represents configuration for <see cref="T:DSharpPlus.DiscordClient"/> and <see cref="T:DSharpPlus.DiscordShardedClient"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.Token">
            <summary>
            Sets the token used to identify the client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.TokenType">
            <summary>
            Sets the type of the token used to identify the client. Defaults to <see cref="F:DSharpPlus.TokenType.Bot"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.LogLevel">
            <summary>
            Sets the maximum logging level for messages. Typically, the default value of <see cref="F:DSharpPlus.LogLevel.Info"/> is ok for most uses.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.UseInternalLogHandler">
            <summary>
            Sets whether to use the internal log handler. This is disabled by default. Use it if you don't want to provide your own log handlers.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.DateTimeFormat">
            <summary>
            Allows you to overwrite the time format used by the internal debug logger. Only applicable when <see cref="P:DSharpPlus.DiscordConfiguration.UseInternalLogHandler"/> is set to true. Defaults to ISO 8601-like format.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.LargeThreshold">
            <summary>
            Sets the member count threshold at which guilds are considered large. Defaults to 250.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.AutoReconnect">
            <summary>
            Sets whether to automatically reconnect in case a connection is lost. Defaults to true.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.ShardId">
            <summary>
            Sets the ID of the shard to connect to. If not sharding, or sharding automatically, this value should be left with the default value of 0.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.ShardCount">
            <summary>
            Sets the total number of shards the bot is on. If not sharding, this value should be left with a default value of 1. If sharding automatically, this value will indicate how many shards 
            to boot. If left default for automatic sharding, the client will determine the shard count automatically.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.EnableCompression">
            <summary>
            Sets whether to enable compression for gateway communication. Disabling this option will increase size of certain dispatches, and might increase login time. Defaults to true.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.MessageCacheSize">
            <summary>
            Sets the size of the global message cache. Setting this to 0 will disable message caching entirely. Defaults to 1024.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.AutomaticGuildSync">
            <summary>
            Sets whether guilds should be automatically synced when logging in with a user token. Defaults to true.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordConfiguration.#ctor">
            <summary>
            Creates a new configuration with default values.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordConfiguration.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Creates a clone of another discord configuration.
            </summary>
            <param name="other">Client configuration to clone.</param>
        </member>
        <member name="T:DSharpPlus.DiscordShardedClient">
            <summary>
            A Discord client that shards automatically.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ClientErrored">
            <summary>
            Fired whenever an error occurs within an event handler.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.SocketErrored">
            <summary>
            Fired whenever a WebSocket error occurs within the client.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.SocketOpened">
            <summary>
            Fired whenever WebSocket connection is established.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.SocketClosed">
            <summary>
            Fired whenever WebSocket connection is terminated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Ready">
            <summary>
            Fired when the client enters ready state.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Resumed">
            <summary>
            Fired whenever a session is resumed.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelCreated">
            <summary>
            Fired when a new channel is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.DmChannelCreated">
            <summary>
            Fired when a new direct message channel is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelUpdated">
            <summary>
            Fired when a channel is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelDeleted">
            <summary>
            Fired when a channel is deleted
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.DmChannelDeleted">
            <summary>
            Fired when a dm channel is deleted
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelPinsUpdated">
            <summary>
            Fired whenever a channel's pinned message list is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildCreated">
            <summary>
            Fired when the user joins a new guild.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildAvailable">
            <summary>
            Fired when a guild is becoming available.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildUpdated">
            <summary>
            Fired when a guild is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildDeleted">
            <summary>
            Fired when the user leaves or is removed from a guild.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildUnavailable">
            <summary>
            Fired when a guild becomes unavailable.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageCreated">
            <summary>
            Fired when a message is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.PresenceUpdated">
            <summary>
            Fired when a presence has been updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildBanAdded">
            <summary>
            Fired when a guild ban gets added
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildBanRemoved">
            <summary>
            Fired when a guild ban gets removed
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildEmojisUpdated">
            <summary>
            Fired when a guilds emojis get updated
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildIntegrationsUpdated">
            <summary>
            Fired when a guild integration is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMemberAdded">
            <summary>
            Fired when a new user joins a guild.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMemberRemoved">
            <summary>
            Fired when a user is removed from a guild (leave/kick/ban).
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMemberUpdated">
            <summary>
            Fired when a guild member is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildRoleCreated">
            <summary>
            Fired when a guild role is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildRoleUpdated">
            <summary>
            Fired when a guild role is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildRoleDeleted">
            <summary>
            Fired when a guild role is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageUpdated">
            <summary>
            Fired when a message is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageDeleted">
            <summary>
            Fired when a message is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessagesBulkDeleted">
            <summary>
            Fired when multiple messages are deleted at once.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.TypingStarted">
            <summary>
            Fired when a user starts typing in a channel.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.UserSettingsUpdated">
            <summary>
            Fired when the current user updates their settings.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.UserUpdated">
            <summary>
            Fired when properties about the user change.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.VoiceStateUpdated">
            <summary>
            Fired when someone joins/leaves/moves voice channels.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.VoiceServerUpdated">
            <summary>
            Fired when a guild's voice server is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMembersChunked">
            <summary>
            Fired in response to Gateway Request Guild Members.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.UnknownEvent">
            <summary>
            Fired when an unknown event gets received.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionAdded">
            <summary>
            Fired when a reaction gets added to a message.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionRemoved">
            <summary>
            Fired when a reaction gets removed from a message.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionsCleared">
            <summary>
            Fired when all reactions get removed from a message.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.WebhooksUpdated">
            <summary>
            Fired whenever webhooks update.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Heartbeated">
            <summary>
            Fired on received heartbeat ACK.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.DebugLogger">
            <summary>
            Gets the logger for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.ShardClients">
            <summary>
            Gets all client shards.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.CurrentApplication">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Initializes new auto-sharding Discord client.
            </summary>
            <param name="config">Configuration to use.</param>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.StartAsync">
            <summary>
            Initializes and connects all shards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.SetWebSocketClient``1">
            <summary>
            Sets the WebSocket client implementation.
            </summary>
            <typeparam name="T">Type of the WebSocket client to use.</typeparam>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.SetUdpClient``1">
            <summary>
            Sets the UDP client implementation.
            </summary>
            <typeparam name="T">Type of the UDP client to use.</typeparam>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.UpdateStatusAsync(DSharpPlus.Entities.DiscordGame,System.Nullable{DSharpPlus.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates playing statuses on all shards.
            </summary>
            <param name="game">Game to set.</param>
            <param name="user_status">Status of the user.</param>
            <param name="idle_since">Since when is the client idle.</param>
            <returns>Asynchronous operation.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplication">
            <summary>
            Represents an OAuth2 application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Description">
            <summary>
            Gets the application's description.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Icon">
            <summary>
            Gets the application's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Name">
            <summary>
            Gets the application's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.RpcOrigins">
            <summary>
            Gets the application's allowed RPC origins.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Flags">
            <summary>
            Gets the application's flags.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Owner">
            <summary>
            Gets the application's owner.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.GetAssetsAsync">
            <summary>
            Retrieves this application's assets.
            </summary>
            <returns>This application's assets.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplication"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.Equals(DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplication"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordApplication"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordApplication"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.op_Equality(DSharpPlus.Entities.DiscordApplication,DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplication"/> objects are equal.
            </summary>
            <param name="e1">First application to compare.</param>
            <param name="e2">Second application to compare.</param>
            <returns>Whether the two applications are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.op_Inequality(DSharpPlus.Entities.DiscordApplication,DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplication"/> objects are not equal.
            </summary>
            <param name="e1">First application to compare.</param>
            <param name="e2">Second application to compare.</param>
            <returns>Whether the two applications are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplicationAsset">
            <summary>
            Represents an asset for an OAuth2 application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Name">
            <summary>
            Gets the asset's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Type">
            <summary>
            Gets the asset's type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Application">
            <summary>
            Gets the application this asset belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Url">
            <summary>
            Gets the Url of this asset.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.Equals(DSharpPlus.Entities.DiscordApplicationAsset)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.op_Equality(DSharpPlus.Entities.DiscordApplicationAsset,DSharpPlus.Entities.DiscordApplicationAsset)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> objects are equal.
            </summary>
            <param name="e1">First application asset to compare.</param>
            <param name="e2">Second application asset to compare.</param>
            <returns>Whether the two application assets not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.op_Inequality(DSharpPlus.Entities.DiscordApplicationAsset,DSharpPlus.Entities.DiscordApplicationAsset)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> objects are not equal.
            </summary>
            <param name="e1">First application asset to compare.</param>
            <param name="e2">Second application asset to compare.</param>
            <returns>Whether the two application assets are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.ApplicationAssetType">
            <summary>
            Determines the type of the asset attached to the application.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ApplicationAssetType.Unknown">
            <summary>
            Unknown type. This indicates something went terribly wrong.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ApplicationAssetType.SmallImage">
            <summary>
            This asset can be used as small image for rich presences.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ApplicationAssetType.LargeImage">
            <summary>
            This asset can be used as large image for rich presences.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordAttachment">
            <summary>
            Represents an attachment for a message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.FileSize">
            <summary>
            Gets the file size in bytes.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Url">
            <summary>
            Gets the URL of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.ProxyUrl">
            <summary>
            Gets the proxied URL of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Height">
            <summary>
            Gets the height. Applicable only if the attachment is an image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Width">
            <summary>
            Gets the width. Applicable only if the attachment is an image.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordAuditLogEntry">
            <summary>
            Represents an audit log entry.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.ActionType">
            <summary>
            Gets the entry's action type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.UserResponsible">
            <summary>
            Gets the user responsible for the action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.Reason">
            <summary>
            Gets the reason defined in the action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.ActionCategory">
            <summary>
            Gets the category under which the action falls.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.PropertyChange`1">
            <summary>
            Represents a description of how a property changed.
            </summary>
            <typeparam name="T">Type of the changed property.</typeparam>
        </member>
        <member name="P:DSharpPlus.Entities.PropertyChange`1.Before">
            <summary>
            The property's value before it was changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.PropertyChange`1.After">
            <summary>
            The property's value after it was changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.Target">
            <summary>
            Gets the affected guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.NameChange">
            <summary>
            Gets the the description of guild name's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.OwnerChange">
            <summary>
            Gets the the description of owner's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.IconChange">
            <summary>
            Gets the the description of icon's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.VerificationLevelChange">
            <summary>
            Gets the the description of verification level's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.AfkChannelChange">
            <summary>
            Gets the the description of afk channel's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.EmbedChannelChange">
            <summary>
            Gets the the description of widget channel's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.NotificationSettingsChange">
            <summary>
            Gets the description of notification settings' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.SystemChannelChange">
            <summary>
            Gets the description of system message channel's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.ExplicitContentFilterChange">
            <summary>
            Gets the description of explicit content filter settings' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.MfaLevelChange">
            <summary>
            Gets the description of guild's mfa level change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.SplashChange">
            <summary>
            Gets the the description of invite splash's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.Target">
            <summary>
            Gets the affected channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.NameChange">
            <summary>
            Gets the description of channel's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.TypeChange">
            <summary>
            Gets the description of channel's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.NsfwChange">
            <summary>
            Gets the description of channel's nsfw flag change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.BitrateChange">
            <summary>
            Gets the description of channel's bitrate change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.OverwriteChange">
            <summary>
            Gets the description of channel permission overwrites' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.TopicChange">
            <summary>
            Gets the description of channel's topic change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.Target">
            <summary>
            Gets the affected overwrite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.Channel">
            <summary>
            Gets the channel for which the overwrite was changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.AllowChange">
            <summary>
            Gets the description of overwrite's allow value change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.DenyChange">
            <summary>
            Gets the description of overwrite's deny value change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.TypeChange">
            <summary>
            Gets the description of overwrite's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.TargetIdChange">
            <summary>
            Gets the description of overwrite's target id change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogKickEntry.Target">
            <summary>
            Gets the kicked member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogPruneEntry.Days">
            <summary>
            Gets the number inactivity days after which members were pruned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogPruneEntry.Toll">
            <summary>
            Gets the number of members pruned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogBanEntry.Target">
            <summary>
            Gets the banned member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.Target">
            <summary>
            Gets the affected member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.NicknameChange">
            <summary>
            Gets the description of member's nickname change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.RemovedRoles">
            <summary>
            Gets the roles that were removed from the member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.AddedRoles">
            <summary>
            Gets the roles that were added to the member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.MuteChange">
            <summary>
            Gets the description of member's mute status change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.DeafenChange">
            <summary>
            Gets the description of member's deaf status change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.Target">
            <summary>
            Gets the affected role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.NameChange">
            <summary>
            Gets the description of role's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.ColorChange">
            <summary>
            Gets the description of role's color change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.PermissionChange">
            <summary>
            Gets the description of role's permission set change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.PositionChange">
            <summary>
            Gets the description of the role's position change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.MentionableChange">
            <summary>
            Gets the description of the role's mentionability change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.HoistChange">
            <summary>
            Gets the description of the role's hoist status change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.Target">
            <summary>
            Gets the affected invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.MaxAgeChange">
            <summary>
            Gets the description of invite's max age change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.CodeChange">
            <summary>
            Gets the description of invite's code change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.TemporaryChange">
            <summary>
            Gets the description of invite's temporariness change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.InviterChange">
            <summary>
            Gets the description of invite's inviting member change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.ChannelChange">
            <summary>
            Gets the description of invite's target channel change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.UsesChange">
            <summary>
            Gets the description of invite's use count change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.MaxUsesChange">
            <summary>
            Gets the description of invite's max use count change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.Target">
            <summary>
            Gets the affected webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.NameChange">
            <summary>
            Gets the description of webhook's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.ChannelChange">
            <summary>
            Gets the description of webhook's target channel change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.TypeChange">
            <summary>
            Gets the description of webhook's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.AvatarChange">
            <summary>
            Gets the description of webhook's avatar change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEmojiEntry.Target">
            <summary>
            Gets the affected emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEmojiEntry.NameChange">
            <summary>
            Gets the description of emoji's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessageEntry.Target">
            <summary>
            Gets the affected message. Note that more often than not, this will only have ID specified.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessageEntry.Channel">
            <summary>
            Gets the channel in which the action occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessageEntry.MessageCount">
            <summary>
            Gets the number of messages that were affected.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.AuditLogActionCategory">
            <summary>
            Indicates audit log action category.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Create">
            <summary>
            Indicates that this action resulted in creation or addition of an object.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Update">
            <summary>
            Indicates that this action resulted in update of an object.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Delete">
            <summary>
            Indicates that this action resulted in deletion or removal of an object.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Other">
            <summary>
            Indicates that this action resulted in something else than creation, addition, update, deleteion, or removal of an object.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.AuditLogActionType">
            <summary>
            Represents type of the action that was taken in given audit log event.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.GuildUpdate">
            <summary>
            Indicates that the guild was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ChannelCreate">
            <summary>
            Indicates that the channel was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ChannelUpdate">
            <summary>
            Indicates that the channel was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ChannelDelete">
            <summary>
            Indicates that the channel was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.OverwriteCreate">
            <summary>
            Indicates that the channel permission overwrite was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.OverwriteUpdate">
            <summary>
            Indicates that the channel permission overwrite was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.OverwriteDelete">
            <summary>
            Indicates that the channel permission overwrite was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Kick">
            <summary>
            Indicates that the user was kicked.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Prune">
            <summary>
            Indicates that users were pruned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Ban">
            <summary>
            Indicates that the user was banned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Unban">
            <summary>
            Indicates that the user was unbanned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MemberUpdate">
            <summary>
            Indicates that the member was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MemberRoleUpdate">
            <summary>
            Indicates that the member's roles were updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.RoleCreate">
            <summary>
            Indicates that the role was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.RoleUpdate">
            <summary>
            Indicates that the role was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.RoleDelete">
            <summary>
            Indicates that the role was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.InviteCreate">
            <summary>
            Indicates that the invite was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.InviteUpdate">
            <summary>
            Indicates that the invite was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.InviteDelete">
            <summary>
            Indicates that the invite was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.WebhookCreate">
            <summary>
            Indicates that the webhook was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.WebhookUpdate">
            <summary>
            Indicates that the webook was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.WebhookDelete">
            <summary>
            Indicates that the webhook was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.EmojiCreate">
            <summary>
            Indicates that the emoji was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.EmojiUpdate">
            <summary>
            Indicates that the emoji was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.EmojiDelete">
            <summary>
            Indicates that the emoji was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MessageDelete">
            <summary>
            Indicates that the message was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordBan">
            <summary>
            Represents a Discord ban
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordBan.Reason">
            <summary>
            Gets the reason for the ban
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordBan.User">
            <summary>
            Gets the banned user
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordChannel">
            <summary>
            Represents a discord channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.GuildId">
            <summary>
            Gets ID of the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.ParentId">
            <summary>
            Gets ID of the category that contains this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Parent">
            <summary>
            Gets the category that contains this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Name">
            <summary>
            Gets the name of this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Type">
            <summary>
            Gets the type of this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Position">
            <summary>
            Gets the position of this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsPrivate">
            <summary>
            Gets whether this channel is a DM channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsCategory">
            <summary>
            Gets whether this channel is a channel category.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Guild">
            <summary>
            Gets the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.PermissionOverwrites">
            <summary>
            Gets a collection of permission overwrites for this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Topic">
            <summary>
            Gets the channel's topic. This is applicable to text channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.LastMessageId">
            <summary>
            Gets the ID of the last message sent in this channel. This is applicable to text channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Bitrate">
            <summary>
            Gets this channel's bitrate. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.UserLimit">
            <summary>
            Gets this channel's user limit. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Mention">
            <summary>
            Gets this channel's mention string.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Children">
            <summary>
            Gets this channel's children. This applies only to channel categories.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsNSFW">
            <summary>
            Gets whether this channel is an NSFW channel.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMessageAsync(System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="content">Content of the message to send.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message containing an attached file to this channel.
            </summary>
            <param name="file_data">Stream containing the data to attach to the message as a file.</param>
            <param name="file_name">Name of the file to attach to the message.</param>
            <param name="content">Content of the message to send.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendFileAsync(System.IO.FileStream,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message containing an attached file to this channel.
            </summary>
            <param name="file_data">Stream containing the data to attach to the message as a file.</param>
            <param name="content">Content of the message to send.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendFileAsync(System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message containing an attached file to this channel.
            </summary>
            <param name="file_path">Path to the file to be attached to the message.</param>
            <param name="content">Content of the message to send.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMultipleFilesAsync(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message with several attached files to this channel.
            </summary>
            <param name="files">A filename to data stream mapping.</param>
            <param name="content">Content of the message to send.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteAsync(System.String)">
            <summary>
            Deletes a guild channel
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessageAsync(System.UInt64)">
            <summary>
            Returns a specific message
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ModifyAsync(System.String,System.Nullable{System.Int32},System.String,DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordChannel},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Modifies the current channel.
            </summary>
            <param name="name">New name for the channel.</param>
            <param name="position">New position for the channel.</param>
            <param name="topic">New topic for the channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="bitrate">New voice bitrate for the channel.</param>
            <param name="user_limit">New user limit for the channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ModifyPositionAsync(System.Int32,System.String)">
            <summary>
            Updates the channel position
            </summary>
            <param name="position"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessagesAsync(System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>  
            Returns a list of messages. Only set ONE of the three parameters. They are Message ID's
            </summary> 
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordMessage},System.String)">
            <summary>
            Deletes multiple messages
            </summary>
            <param name="messages"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteMessageAsync(DSharpPlus.Entities.DiscordMessage,System.String)">
            <summary>
            Deletes a message
            </summary>
            <param name="message"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetInvitesAsync">
            <summary>
            Returns a list of invite objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateInviteAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create a new invite object
            </summary>
            <param name="max_age"></param>
            <param name="max_uses"></param>
            <param name="temporary"></param>
            <param name="unique"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteOverwriteAsync(DSharpPlus.Entities.DiscordOverwrite,System.String)">
            <summary>
            Deletes a channel permission overwrite
            </summary>
            <param name="overwrite"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.UpdateOverwriteAsync(DSharpPlus.Entities.DiscordOverwrite,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String)">
            <summary>
            Updates a channel permission overwrite.
            </summary>
            <param name="overwrite">Overwrite to update.</param>
            <param name="allow">Permissions to allow.</param>
            <param name="deny">Permissions to deny.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.AddOverwriteAsync(DSharpPlus.Entities.DiscordMember,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String)">
            <summary>
            Adds a channel permission overwrite for specified member.
            </summary>
            <param name="member"></param>
            <param name="allow"></param>
            <param name="deny"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.AddOverwriteAsync(DSharpPlus.Entities.DiscordRole,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String)">
            <summary>
            Adds a channel permission overwrite for specified role.
            </summary>
            <param name="role"></param>
            <param name="allow"></param>
            <param name="deny"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.TriggerTypingAsync">
            <summary>
            Post a typing indicator
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetPinnedMessagesAsync">
            <summary>
            Returns all pinned messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateWebhookAsync(System.String,System.IO.Stream,System.String)">
            <summary>
            Create a new webhook
            </summary>
            <param name="name"></param>
            <param name="avatar"></param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetWebhooksAsync">
            <summary>
            Returns a list of webhooks
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.PlaceMemberAsync(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Moves a member to this voice channel
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.PermissionsFor(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Calculates permissions for a given member.
            </summary>
            <param name="mbr">Member to calculate permissions for.</param>
            <returns>Calculated permissions for a given member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ToString">
            <summary>
            Returns a string representation of this channel.
            </summary>
            <returns>String representation of this channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordChannel"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.Equals(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordChannel"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordChannel"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordChannel"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.op_Equality(DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordChannel"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.op_Inequality(DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordChannel"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordColor">
            <summary>
            Represents a color used in Discord API.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.None">
            <summary>
            Represents no color, or integer 0;
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Black">
            <summary>
            A near-black color. Due to API limitations, the color is #010101, rather than #000000, as the latter is treated as no color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.White">
            <summary>
            White, or #FFFFFF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Gray">
            <summary>
            Gray, or #808080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkGray">
            <summary>
            Dark gray, or #A9A9A9.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.LightGray">
            <summary>
            Light gray, or #808080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.VeryDarkGray">
            <summary>
            Very dark gray, or #666666.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Blurple">
            <summary>
            Discord Blurple, or #7289DA.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Grayple">
            <summary>
            Discord Grayple, or #99AAB5.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkButNotBlack">
            <summary>
            Discord Dark, But Not Black, or #2C2F33.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.NotQuiteBlack">
            <summary>
            Discord Not QuiteBlack, or #23272A.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Red">
            <summary>
            Red, or #FF0000.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkRed">
            <summary>
            Dark red, or #7F0000.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Green">
            <summary>
            Green, or #00FF00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkGreen">
            <summary>
            Dark green, or #007F00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Blue">
            <summary>
            Blue, or #0000FF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkBlue">
            <summary>
            Dark blue, or #00007F.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Yellow">
            <summary>
            Yellow, or #FFFF00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Cyan">
            <summary>
            Cyan, or #00FFFF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Magenta">
            <summary>
            Magenta, or #FF00FF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Teal">
            <summary>
            Teal, or #008080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Aquamarine">
            <summary>
            Aquamarine, or #00FFBF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Gold">
            <summary>
            Gold, or #FFD700.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Goldenrod">
            <summary>
            Goldenrod, or #DAA520.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Azure">
            <summary>
            Azure, or #007FFF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Rose">
            <summary>
            Rose, or #FF007F.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.SpringGreen">
            <summary>
            Spring green, or #00FF7F.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Chartreuse">
            <summary>
            Chartreuse, or #7FFF00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Orange">
            <summary>
            Orange, or #FFA500.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Purple">
            <summary>
            Purple, or #800080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Violet">
            <summary>
            Violet, or #EE82EE.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Brown">
            <summary>
            Brown, or #A52A2A.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.HotPink">
            <summary>
            Hot pink, or #FF69B4
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Lilac">
            <summary>
            Lilac, or #C8A2C8.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.CornflowerBlue">
            <summary>
            Cornflower blue, or #6495ED.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.MidnightBlue">
            <summary>
            Midnight blue, or #191970.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Wheat">
            <summary>
            Wheat, or #F5DEB3.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.IndianRed">
            <summary>
            Indian red, or #CD5C5C.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Turquoise">
            <summary>
            Turquoise, or #30D5C8.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.SapGreen">
            <summary>
            Sap green, or #507D2A.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.PhthaloBlue">
            <summary>
            Phthalo blue, or #000F89.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.PhthaloGreen">
            <summary>
            Phthalo green, or #123524.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Sienna">
            <summary>
            Sienna, or #882D17.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Value">
            <summary>
            Gets the integer representation of this color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.R">
            <summary>
            Gets the red component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.G">
            <summary>
            Gets the green component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.B">
            <summary>
            Gets the blue component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.Int32)">
            <summary>
            Creates a new color with specified value.
            </summary>
            <param name="color">Value of the color.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color with specified values for red, green, and blue components.
            </summary>
            <param name="r">Value of the red component.</param>
            <param name="g">Value of the green component.</param>
            <param name="b">Value of the blue component.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color with specified values for red, green, and blue components.
            </summary>
            <param name="r">Value of the red component.</param>
            <param name="g">Value of the green component.</param>
            <param name="b">Value of the blue component.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.String)">
            <summary>
            Creates a new color from specified string representation.
            </summary>
            <param name="color">String representation of the color. Must be 6 hexadecimal characters, optionally with # prefix.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.ToString">
            <summary>
            Gets a string representation of this color.
            </summary>
            <returns>String representation of this color.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordConnection">
            <summary>
            Gets a Discord connection to a 3rd party service.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Name">
            <summary>
            Gets the username of the connected account.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Type">
            <summary>
            Gets the name of the connection service.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.IsRevoked">
            <summary>
            Gets whether the connection is revoked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Integrations">
            <summary>
            Gets a collection of partial server integrations.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordDmChannel">
            <inheritdoc />
            <summary>
            Represents a direct message channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.Recipients">
            <summary>
            Gets the recipients of this direct message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.IconHash">
            <summary>
            Gets the hash of this channel's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.IconUrl">
            <summary>
            Gets the URL of this channel's icon.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordDmChannel.AddDmRecipientAsync(System.UInt64,System.String,System.String)">
            <summary>
            Only use for Group DMs! Whitelised bots only. Requires user's oauth2 access token
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordDmChannel.RemoveDmRecipientAsync(System.UInt64,System.String)">
            <summary>
            Only use for Group DMs!
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbed">
            <summary>
            Represents a discord embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Title">
            <summary>
            Gets the embed's title.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Type">
            <summary>
            Gets the embed's type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Description">
            <summary>
            Gets the embed's description.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Url">
            <summary>
            Gets the embed's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Timestamp">
            <summary>
            Gets the embed's timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Color">
            <summary>
            Gets the embed's color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Footer">
            <summary>
            Gets the embed's footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Image">
            <summary>
            Gets the embed's image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Thumbnail">
            <summary>
            Gets the embed's thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Video">
            <summary>
            Gets the embed's video.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Provider">
            <summary>
            Gets the embed's provider.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Author">
            <summary>
            Gets the embed's author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Fields">
            <summary>
            Gets the embed's fields.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedAuthor">
            <summary>
            Gets the author of a discord embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.Name">
            <summary>
            Gets the name of the author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.Url">
            <summary>
            Gets the url of the author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.IconUrl">
            <summary>
            Gets the url of the author's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.ProxyIconUrl">
            <summary>
            Gets the proxied url of the author's icon.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedBuilder">
            <summary>
            Constructs embeds.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Title">
            <summary>
            Gets or sets the embed's title.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Description">
            <summary>
            Gets or sets the embed's description.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Url">
            <summary>
            Gets or sets the url for the embed's title.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Color">
            <summary>
            Gets or sets the embed's color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Timestamp">
            <summary>
            Gets or sets the embed's timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.ImageUrl">
            <summary>
            Gets or sets the embed's image url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.ThumbnailUrl">
            <summary>
            Gets or sets the thumbnail's image url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Author">
            <summary>
            Gets the embed's author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Footer">
            <summary>
            Gets the embed's footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Fields">
            <summary>
            Gets the embed's fields.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.#ctor">
            <summary>
            Constructs a new empty embed builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.#ctor(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Constructs a new embed builder using another embed as prototype.
            </summary>
            <param name="original">Embed to use as prototype.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTitle(System.String)">
            <summary>
            Sets the embed's title.
            </summary>
            <param name="title">Title to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithDescription(System.String)">
            <summary>
            Sets the embed's description.
            </summary>
            <param name="description">Description to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithUrl(System.String)">
            <summary>
            Sets the embed's title url.
            </summary>
            <param name="url">Title url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithUrl(System.Uri)">
            <summary>
            Sets the embed's title url.
            </summary>
            <param name="url">Title url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithColor(DSharpPlus.Entities.DiscordColor)">
            <summary>
            Sets the embed's color.
            </summary>
            <param name="color">Embed color to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTimestamp(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the embed's timestamp.
            </summary>
            <param name="timestamp">Timestamp to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Sets the embed's timestamp.
            </summary>
            <param name="timestamp">Timestamp to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTimestamp(System.UInt64)">
            <summary>
            Sets the embed's timestamp based on a snowflake.
            </summary>
            <param name="snowflake">Snowflake to calculate timestamp from.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithImageUrl(System.String)">
            <summary>
            Sets the embed's image url.
            </summary>
            <param name="url">Image url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithImageUrl(System.Uri)">
            <summary>
            Sets the embed's image url.
            </summary>
            <param name="url">Image url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithThumbnailUrl(System.String)">
            <summary>
            Sets the embed's thumbnail url.
            </summary>
            <param name="url">Thumbnail url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithThumbnailUrl(System.Uri)">
            <summary>
            Sets the embed's thumbnail url.
            </summary>
            <param name="url">Thumbnail url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithAuthor(System.String,System.String,System.String)">
            <summary>
            Sets the embed's author.
            </summary>
            <param name="name">Author's name.</param>
            <param name="url">Author's url.</param>
            <param name="icon_url">Author icon's url.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithFooter(System.String,System.String)">
            <summary>
            Sets the embed's footer.
            </summary>
            <param name="text">Footer's text.</param>
            <param name="icon_url">Footer icon's url.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.AddField(System.String,System.String,System.Boolean)">
            <summary>
            Adds a field to this embed.
            </summary>
            <param name="name">Name of the field to add.</param>
            <param name="value">Value of the field to add.</param>
            <param name="inline">Whether the field is to be inline or not.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.ClearFields">
            <summary>
            Removes all fields from this embed.
            </summary>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.Build">
            <summary>
            Constructs a new embed from data supplied to this builder.
            </summary>
            <returns>New discord embed.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.op_Implicit(DSharpPlus.Entities.DiscordEmbedBuilder)~DSharpPlus.Entities.DiscordEmbed">
            <summary>
            Implicitly converts this builder to an embed.
            </summary>
            <param name="builder">Builder to convert.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.op_Implicit(DSharpPlus.Entities.DiscordEmbedBuilder)~DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordEmbed}">
            <summary>
            Implicitly converts this builder to an optional embed.
            </summary>
            <param name="builder">Builder to convert.</param>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor.Name">
            <summary>
            Gets or sets the name of the author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor.Url">
            <summary>
            Gets or sets the Url to which the author's link leads.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor.IconUrl">
            <summary>
            Gets or sets the Author's icon url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedFooter.Text">
            <summary>
            Gets or sets the text of the footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedFooter.IconUrl">
            <summary>
            Gets or sets the Url 
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedField">
            <summary>
            Represents a field inside a discord embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedField.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedField.Value">
            <summary>
            Gets the value of the field.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedField.Inline">
            <summary>
            Gets whether or not this field should display inline.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedFooter">
            <summary>
            Represents a footer in an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedFooter.Text">
            <summary>
            Gets the footer's text.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedFooter.IconUrl">
            <summary>
            Gets the url of the footer's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedFooter.ProxyIconUrl">
            <summary>
            Gets the proxied url of the footer's icon.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedImage">
            <summary>
            Represents an image in an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.Url">
            <summary>
            Gets the source url of the image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.ProxyUrl">
            <summary>
            Gets a proxied url of the image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedProvider">
            <summary>
            Represents an embed provider.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedProvider.Url">
            <summary>
            Gets the url of the provider.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedThumbnail">
            <summary>
            Represents a thumbnail in an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.Url">
            <summary>
            Gets the source url of the thumbnail (only https).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.ProxyUrl">
            <summary>
            Gets a proxied url of the thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.Height">
            <summary>
            Gets the height of the thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.Width">
            <summary>
            Gets the width of the thumbnail.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedVideo">
            <summary>
            Represents a video inside an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedVideo.Url">
            <summary>
            Gets the source url of the video.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedVideo.Height">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedVideo.Width">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmoji">
            <summary>
            Represents a Discord emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.Name">
            <summary>
            Gets the name of this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.Roles">
            <summary>
            Gets IDs the roles this emoji is enabled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.RequireColons">
            <summary>
            Gets whether this emoji requires colons to use.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.Managed">
            <summary>
            Gets whether this emoji is managed by an integration.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.GetDiscordName">
            <summary>
            Gets emoji's name in non-Unicode format (eg. :thinking: instead of the Unicode representation of the emoji).
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.ToString">
            <summary>
            Returns a string representation of this emoji.
            </summary>
            <returns>String representation of this emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.Equals(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordEmoji"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.op_Equality(DSharpPlus.Entities.DiscordEmoji,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> objects are equal.
            </summary>
            <param name="e1">First emoji to compare.</param>
            <param name="e2">Second emoji to compare.</param>
            <returns>Whether the two emoji are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.op_Inequality(DSharpPlus.Entities.DiscordEmoji,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> objects are not equal.
            </summary>
            <param name="e1">First emoji to compare.</param>
            <param name="e2">Second emoji to compare.</param>
            <returns>Whether the two emoji are not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.op_Implicit(DSharpPlus.Entities.DiscordEmoji)~System.String">
            <summary>
            Implicitly converts this emoji to its string representation.
            </summary>
            <param name="e1">Emoji to convert.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromUnicode(DSharpPlus.DiscordClient,System.String)">
            <summary>
            Creates an emoji object from a unicode entity.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.DiscordClient"/> to attach to the object.</param>
            <param name="unicode_entity">Unicode entity to create the object from.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromUnicode(System.String)">
            <summary>
            Creates an emoji object from a unicode entity.
            </summary>
            <param name="unicode_entity">Unicode entity to create the object from.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromGuildEmote(DSharpPlus.DiscordClient,System.UInt64)">
            <summary>
            Creates an emoji object from a guild emote.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.DiscordClient"/> to attach to the object.</param>
            <param name="id">Id of the emote.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromName(DSharpPlus.DiscordClient,System.String)">
            <summary>
            Creates a DiscordEmoji from emote name that includes colons (eg. :thinking:). This method also supports skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild emoji (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DSharpPlus.DiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.UserStatus">
            <summary>
            Represents user status.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Offline">
            <summary>
            User is offline.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Online">
            <summary>
            User is online.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Idle">
            <summary>
            User is idle.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.DoNotDisturb">
            <summary>
            User asked not to be disturbed.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Invisible">
            <summary>
            User is invisible. They will appear as Offline to anyone but themselves.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGame">
            <summary>
            Represents a game that a user is playing.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGame.#ctor">
            <summary>
            Creates a new, empty instance of a <see cref="T:DSharpPlus.Entities.DiscordGame"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGame.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:DSharpPlus.Entities.DiscordGame"/> with specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.Name">
            <summary>
            Gets or sets the name of the game the user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.Url">
            <summary>
            Gets or sets the stream URI, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.StreamType">
            <summary>
            Gets or sets the livesteam type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.Details">
            <summary>
            Gets or sets the details.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.State">
            <summary>
            Gets or sets game state.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.Application">
            <summary>
            Gets or sets the application for which the rich presence is for.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.Instance">
            <summary>
            Gets or sets instance status.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.LargeImage">
            <summary>
            Gets or sets large image for the rich presence.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.LargeImageText">
            <summary>
            Gets or sets the hovertext for large image.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.SmallImage">
            <summary>
            Gets or sets small image for the rich presence.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.SmallImageText">
            <summary>
            Gets or sets the hovertext for small image.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.CurrentPartySize">
            <summary>
            Gets or sets current party size.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.MaximumPartySize">
            <summary>
            Gets or sets maximum party size.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.PartyId">
            <summary>
            Gets or sets the party ID.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.StartTimestamp">
            <summary>
            Gets or sets the game start timestamp.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.EndTimestamp">
            <summary>
            Gets or sets the game end timestamp.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.JoinSecret">
            <summary>
            Gets or sets the secret value enabling users to join your game. Note that this works for RPC applications only.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.MatchSecret">
            <summary>
            Gets or sets the secret value enabling users to receive notifications whenever your game state changes. Requires instance set to true.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGame.SpectateSecret">
            <summary>
            Gets or sets the secret value enabling users to spectate your game. Note that this works for RPC applications only.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.GameStreamType">
            <summary>
            Determines the livestream type for a game.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.GameStreamType.NoStream">
            <summary>
            The game is not being streamed.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.GameStreamType.Twitch">
            <summary>
            The game is being streamed on Twitch.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuild">
            <summary>
            Represents a Discord guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Name">
            <summary>
            Gets the guild's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IconHash">
            <summary>
            Gets the guild icon's hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IconUrl">
            <summary>
            Gets the guild icon's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.SplashHash">
            <summary>
            Gets the guild splash's hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.SplashUrl">
            <summary>
            Gets the guild splash's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.OwnerId">
            <summary>
            Gets the ID of the guild's owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Owner">
            <summary>
            Gets the guild's owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.RegionId">
            <summary>
            Gets the guild's voice region ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.AfkChannelId">
            <summary>
            Gets the guild's AFK voice channel ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.AfkChannel">
            <summary>
            Gets the guild's AFK voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.AfkTimeout">
            <summary>
            Gets the guild's AFK timeout.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.EmbedEnabled">
            <summary>
            Gets whether this guild has the guild embed enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.EmbedChannelId">
            <summary>
            Gets the ID of the channel from the guild's embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.EmbedChannel">
            <summary>
            Gets the channel from the guild's embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.VerificationLevel">
            <summary>
            Gets the guild's verification level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.DefaultMessageNotifications">
            <summary>
            Gets the guild's default notification settings.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.ExplicitContentFilter">
            <summary>
            Gets the guild's explicit content filter settings.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Roles">
            <summary>
            Gets a collection of this guild's roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Emojis">
            <summary>
            Gets a collection of this guild's emojis.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Features">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MfaLevel">
            <summary>
            Gets the required multi-factor authentication level for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.JoinedAt">
            <summary>
            Gets this guild's join date.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsLarge">
            <summary>
            Gets whether this guild is considered to be a large guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsUnavailable">
            <summary>
            Gets whether this guild is unavailable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MemberCount">
            <summary>
            Gets the total number of members in this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.VoiceStates">
            <summary>
            Gets a collection of all the voice states for this guilds.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Members">
            <summary>
            Gets a collection of all the members that belong to this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Channels">
            <summary>
            Gets a collection of all the channels associated with this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.CurrentMember">
            <summary>
            Gets the guild member for current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.EveryoneRole">
            <summary>
            Gets the @everyone role for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsOwner">
            <summary>
            Gets whether the current user is the guild's owner.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteAsync">
            <summary>
            Deletes this guild. Requires the caller to be the owner of the guild.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyAsync(System.String,System.String,System.IO.Stream,System.Nullable{DSharpPlus.Entities.VerificationLevel},System.Nullable{DSharpPlus.Entities.DefaultMessageNotifications},System.Nullable{DSharpPlus.Entities.MfaLevel},System.Nullable{DSharpPlus.Entities.ExplicitContentFilter},DSharpPlus.Entities.DiscordChannel,System.Nullable{System.Int32},DSharpPlus.Entities.DiscordMember,System.IO.Stream,System.String)">
            <summary>
            Modifies this guild.
            </summary>
            <param name="name">New name.</param>
            <param name="region">New voice region.</param>
            <param name="icon">New icon.</param>
            <param name="verification_level">New verification level.</param>
            <param name="default_message_notifications">New default notification settings.</param>
            <param name="mfa_level">New MFA requirement setting.</param>
            <param name="explicit_content_filter">New explicit content filter setting.</param>
            <param name="afk_channel">New voice AFK channel.</param>
            <param name="afk_timeout">New timeout after users are going to be moved to the voice AFK channel in seconds.</param>
            <param name="owner">New owner. This can only be changed by current owner.</param>
            <param name="splash">New invite splash.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The modified guild object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.BanMemberAsync(DSharpPlus.Entities.DiscordMember,System.Int32,System.String)">
            <summary>
            Bans a specified member from this guild.
            </summary>
            <param name="member">Member to ban.</param>
            <param name="delete_message_days">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.BanMemberAsync(System.UInt64,System.Int32,System.String)">
            <summary>
            Bans a specified user by ID. This doesn't require the user to be in this guild.
            </summary>
            <param name="user_id">ID of the user to ban.</param>
            <param name="delete_message_days">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.UnbanMemberAsync(DSharpPlus.Entities.DiscordUser,System.String)">
            <summary>
            Unbans a user from this guild.
            </summary>
            <param name="user">User to unban.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.UnbanMemberAsync(System.UInt64,System.String)">
            <summary>
            Unbans a user by ID.
            </summary>
            <param name="user_id">ID of the user to unban.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.LeaveAsync">
            <summary>
            Leaves this guild.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetBansAsync">
            <summary>
            Gets the bans for this guild.
            </summary>
            <returns>Collection of bans in this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateChannelAsync(System.String,DSharpPlus.ChannelType,DSharpPlus.Entities.DiscordChannel,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwrite},System.String)">
            <summary>
            Creates a new channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="type">Type of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="bitrate">Bitrate of the channel. Applies to voice only.</param>
            <param name="user_limit">Maximum number of users in the channel. Applies to voice only.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetPruneCountAsync(System.Int32)">
            <summary>
            Estimates the number of users to be pruned.
            </summary>
            <param name="days">Minimum number of inactivity days required for users to be pruned.</param>
            <returns>Number of users that will be pruned.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.PruneAsync(System.Int32,System.String)">
            <summary>
            Prunes inactive users from this guild.
            </summary>
            <param name="days">Minimum number of inactivity days required for users to be pruned.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>Number of users pruned.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetIntegrationsAsync">
            <summary>
            Gets integrations attached to this guild.
            </summary>
            <returns>Collection of integrations attached to this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.AttachUserIntegrationAsync(DSharpPlus.Entities.DiscordIntegration)">
            <summary>
            Attaches an integration from current user to this guild.
            </summary>
            <param name="integration">Integration to attach.</param>
            <returns>The integration after being attached to the guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyIntegrationAsync(DSharpPlus.Entities.DiscordIntegration,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies an integration in this guild.
            </summary>
            <param name="integration">Integration to modify.</param>
            <param name="expire_behaviour">Number of days after which the integration expires.</param>
            <param name="expire_grace_period">Length of grace period which allows for renewing the integration.</param>
            <param name="enable_emoticons">Whether emotes should be synced from this integration.</param>
            <returns>The modified integration.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteIntegrationAsync(DSharpPlus.Entities.DiscordIntegration)">
            <summary>
            Removes an integration from this guild.
            </summary>
            <param name="integration">Integration to remove.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.SyncIntegrationAsync(DSharpPlus.Entities.DiscordIntegration)">
            <summary>
            Forces re-synchronization of an integration for this guild.
            </summary>
            <param name="integration">Integration to synchronize.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEmbedAsync">
            <summary>
            Gets the guild widget.
            </summary>
            <returns>This guild's widget.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetVoiceRegionsAsync">
            <summary>
            Gets the voice regions for this guild.
            </summary>
            <returns>Voice regions available for this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetInvitesAsync">
            <summary>
            Gets all the invites created for all the channels in this guild.
            </summary>
            <returns>A collection of invites.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetWebhooksAsync">
            <summary>
            Gets all the webhooks created for all the channels in this guild.
            </summary>
            <returns>A collection of webhooks this guild has.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.RemoveMemberAsync(DSharpPlus.Entities.DiscordMember,System.String)">
            <summary>
            Kicks a member from this guild.
            </summary>
            <param name="member">Member to kick.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetMemberAsync(System.UInt64)">
            <summary>
            Gets a member of this guild by his user ID.
            </summary>
            <param name="user_id">ID of the member to get.</param>
            <returns>The requested member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetAllMembersAsync">
            <summary>
            Requests a full list of members from Discord.
            </summary>
            <returns>A collection of all members in this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetChannelsAsync">
            <summary>
            Gets all the channels this guild has.
            </summary>
            <returns>A collection of this guild's channels.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.UpdateRoleAsync(DSharpPlus.Entities.DiscordRole,System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Modifies a role in this guild.
            </summary>
            <param name="role">Role to modify.</param>
            <param name="name">New name.</param>
            <param name="permissions">New permissions.</param>
            <param name="color">New color.</param>
            <param name="hoist">Whether the role is to be hoisted.</param>
            <param name="mentionable">Whether the role is to be mentionable.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.UpdateRolePositionAsync(DSharpPlus.Entities.DiscordRole,System.Int32,System.String)">
            <summary>
            Modifies position of the given role in the role hierarchy.
            </summary>
            <param name="role">Role to modify.</param>
            <param name="position">New position.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateRoleAsync(System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Creates a new role in this guild.
            </summary>
            <param name="name">Name of the role.</param>
            <param name="permissions">Permissions for the role.</param>
            <param name="color">Color for the role.</param>
            <param name="hoist">Whether the role is to be hoisted.</param>
            <param name="mentionable">Whether the role is to be mentionable.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created role.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteRoleAsync(DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Deletes a role from this guild.
            </summary>
            <param name="role">Role to delete.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetRole(System.UInt64)">
            <summary>
            Gets a role from this guild by its ID.
            </summary>
            <param name="id">ID of the role to get.</param>
            <returns>Requested role.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetChannel(System.UInt64)">
            <summary>
            Gets a channel from this guild by its ID.
            </summary>
            <param name="id">ID of the channel to get.</param>
            <returns>Requested channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GrantRoleAsync(DSharpPlus.Entities.DiscordMember,DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Grants a role to a member. 
            </summary>
            <param name="member">Member to grant the role to.</param>
            <param name="role">Role to grant.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.RevokeRoleAsync(DSharpPlus.Entities.DiscordMember,DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Revokes a role from a member. 
            </summary>
            <param name="member">Member to revoke the role from.</param>
            <param name="role">Role to revoke.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetAuditLogsAsync(System.Nullable{System.Int32},DSharpPlus.Entities.DiscordMember,System.Nullable{DSharpPlus.Entities.AuditLogActionType})">
            <summary>
            Gets audit log entries for this guild.
            </summary>
            <param name="limit">Maximum number of entries to fetch.</param>
            <param name="by_member">Filter by member responsible.</param>
            <param name="action_type">Filter by action type.</param>
            <returns>A collection of requested audit log entries.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.SyncAsync">
            <summary>
            Sends a guild sync request for this guild. This fills the guild's member and presence information, and starts dispatching additional events.
            
            This can only be done for user tokens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.AcknowledgeAsync">
            <summary>
            Acknowledges all the messages in this guild. This is available to user tokens only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEmojisAsync">
            <summary>
            Gets all of this guild's custom emojis.
            </summary>
            <returns>All of this guild's custom emojis.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEmojiAsync(System.UInt64)">
            <summary>
            Gets this guild's specified custom emoji.
            </summary>
            <param name="id">ID of the emoji to get.</param>
            <returns>The requested custom emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateEmojiAsync(System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Creates a new custom emoji for this guild.
            </summary>
            <param name="name">Name of the new emoji.</param>
            <param name="image">Image to use as the emoji.</param>
            <param name="roles">Roles for which the emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The newly-created emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyEmojiAsync(DSharpPlus.Entities.DiscordGuildEmoji,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Modifies a this guild's custom emoji.
            </summary>
            <param name="emoji">Emoji to modify.</param>
            <param name="name">New name for the emoji.</param>
            <param name="roles">Roles for which the emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteEmojiAsync(DSharpPlus.Entities.DiscordGuildEmoji,System.String)">
            <summary>
            Deletes this guild's custom emoji.
            </summary>
            <param name="emoji">Emoji to delete.</param>
            <param name="reason">Reason for audit log.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetDefaultChannel">
            <summary>
            Gets the default channel for this member.
            </summary>
            <returns>This member's default channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ToString">
            <summary>
            Returns a string representation of this guild.
            </summary>
            <returns>String representation of this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordGuild"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.Equals(DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordGuild"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordGuild"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordGuild"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.op_Equality(DSharpPlus.Entities.DiscordGuild,DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordGuild"/> objects are equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.op_Inequality(DSharpPlus.Entities.DiscordGuild,DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordGuild"/> objects are not equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.VerificationLevel">
            <summary>
            Represents guild verification level.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.None">
            <summary>
            No verification. Anyone can join and chat right away.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.Low">
            <summary>
            Low verification level. Users are required to have a verified email attached to their account in order to be able to chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.Medium">
            <summary>
            Medium verification level. Users are required to have a verified email attached to their account, and account age need to be at least 5 minutes in order to be able to chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.High">
            <summary>
            (╯°□°）╯︵ ┻━┻ verification level. Users are required to have a verified email attached to their account, account age need to be at least 5 minutes, and they need to be in the server for at least 10 minutes in order to be able to chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.Highest">
            <summary>
            ┻━┻ ﾐヽ(ಠ益ಠ)ノ彡┻━┻ verification level. Users are required to have a verified phone number attached to their account.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DefaultMessageNotifications">
            <summary>
            Represents default notification level for a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.DefaultMessageNotifications.AllMessages">
            <summary>
            All messages will trigger push notifications.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.DefaultMessageNotifications.MentionsOnly">
            <summary>
            Only messages that mention the user (or a role he's in) will trigger push notifications.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.MfaLevel">
            <summary>
            Represents multi-factor authentication level required by a guild to use administrator functionality.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MfaLevel.Disabled">
            <summary>
            Multi-factor authentication is not required to use administrator functionality.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MfaLevel.Enabled">
            <summary>
            Multi-factor authentication is required to use administrator functionality.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ExplicitContentFilter">
            <summary>
            Represents the value of explicit content filter in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ExplicitContentFilter.Disabled">
            <summary>
            Explicit content filter is disabled.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ExplicitContentFilter.MembersWithoutRoles">
            <summary>
            Only messages from members without any roles are scanned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ExplicitContentFilter.AllMembers">
            <summary>
            Messages from all members are scanned.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildEmbed">
            <summary>
            Represents a Discord guild widget.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmbed.IsEnabled">
            <summary>
            Gets whether the embed is enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmbed.ChannelId">
            <summary>
            Gets the ID of the widget channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmoji.User">
            <summary>
            Gets the user that created this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmoji.Guild">
            <summary>
            Gets the guild to which this emoji belongs.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuildEmoji.ModifyAsync(System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Modifies this emoji.
            </summary>
            <param name="name">New name for this emoji.</param>
            <param name="roles">Roles for which this emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuildEmoji.DeleteAsync(System.String)">
            <summary>
            Deletes this emoji.
            </summary>
            <param name="reason">Reason for audit log.</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordIntegration">
            <summary>
            Represents a Discord integration. These appear on the profile as linked 3rd party accounts.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.Name">
            <summary>
            Gets the integration name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.Type">
            <summary>
            Gets the integration type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.IsEnabled">
            <summary>
            Gets whether this integration is enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.IsSyncing">
            <summary>
            Gets whether this integration is syncing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.RoleId">
            <summary>
            Gets ID of the role this integration uses for subscribers.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.ExpireBehavior">
            <summary>
            Gets the expiration behaviour.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.ExpireGracePeriod">
            <summary>
            Gets the grace period before expiring subscribers.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.User">
            <summary>
            Gets the user that owns this integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.Account">
            <summary>
            Gets the 3rd party service account for this integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.SyncedAt">
            <summary>
            Gets the date and time this integration was last synced.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordIntegrationAccount">
            <summary>
            Represents a Discord integration account.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegrationAccount.Name">
            <summary>
            Gets the name of the account.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInvite">
            <summary>
            Represents a Discord invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Code">
            <summary>
            Gets the invite's code.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Guild">
            <summary>
            Gets the guild this invite is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Channel">
            <summary>
            Gets the channel this invite is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Inviter">
            <summary>
            Gets the user who created the invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Uses">
            <summary>
            Gets the number of times this invite has been used.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.MaxUses">
            <summary>
            Gets the max number of times this invite can be used.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.MaxAge">
            <summary>
            Gets duration in seconds after which the invite expires.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.IsTemporary">
            <summary>
            Gets whether this invite only grants temporary membership.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.CreatedAt">
            <summary>
            Gets the date and time this invite was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.IsRevoked">
            <summary>
            Gets whether this invite is revoked.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInvite.DeleteAsync(System.String)">
            <summary>
            Deletes the invite.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInvite.ToString">
            <summary>
            Converts this invite into an invite link.
            </summary>
            <returns>A discord.gg invite link.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInviteChannel">
            <summary>
            Represents the channel to which an invite is linked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteChannel.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteChannel.Type">
            <summary>
            Gets the type of the channel.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInviteGuild">
            <summary>
            Represents a guild to which the user is invited.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.Name">
            <summary>
            Gets the name of the guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.SplashHash">
            <summary>
            Gets the hash of guild's invite splash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.SplashUrl">
            <summary>
            Gets the URL of guild's invite splash.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMember">
            <summary>
            Represents a Discord guild member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Nickname">
            <summary>
            Gets this member's nickname.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.DisplayName">
            <summary>
            Gets this member's display name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.RoleIds">
            <summary>
            List of role ids
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Roles">
            <summary>
            Gets the list of roles associated with this member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Color">
            <summary>
            Gets the color associated with this user's top color-giving role, otherwise 0 (no color).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.JoinedAt">
            <summary>
            Date the user joined the guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsDeafened">
            <summary>
            If the user is deafened
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsMuted">
            <summary>
            If the user is muted
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.VoiceState">
            <summary>
            Gets this member's voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Guild">
            <summary>
            Gets the guild of which this member is a part of.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsOwner">
            <summary>
            Gets whether this member is the Guild owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Username">
            <summary>
            Gets this member's username.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Discriminator">
            <summary>
            Gets the user's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.AvatarHash">
            <summary>
            Gets the user's avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsBot">
            <summary>
            Gets whether the user is a bot.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Email">
            <summary>
            Gets the user's email address.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.MfaEnabled">
            <summary>
            Gets whether the user has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Verified">
            <summary>
            Gets whether the user is verified.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.CreateDmChannelAsync">
            <summary>
            Creates a direct message channel to this member.
            </summary>
            <returns>Direct message channel to this member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendMessageAsync(System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="content">Content of the message to send.</param>
            <param name="is_tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message with a file attached to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="file_data">Stream containing the data to attach as a file.</param>
            <param name="file_name">Name of the file to attach.</param>
            <param name="content">Content of the message to send.</param>
            <param name="is_tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendFileAsync(System.IO.FileStream,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message with a file attached to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="file_data">Stream containing the data to attach as a file.</param>
            <param name="content">Content of the message to send.</param>
            <param name="is_tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendFileAsync(System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message with a file attached to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="file_path">Path to the file to attach to the message.</param>
            <param name="content">Content of the message to send.</param>
            <param name="is_tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendMultipleFilesAsync(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message with several files attached to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="files">Dictionary of filename to data stream containing the data to upload as files.</param>
            <param name="content">Content of the message to send.</param>
            <param name="is_tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SetMuteAsync(System.Boolean,System.String)">
            <summary>
            Sets this member's voice mute status.
            </summary>
            <param name="mute">Whether the member is to be muted.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SetDeafAsync(System.Boolean,System.String)">
            <summary>
            Sets this member's voice deaf status.
            </summary>
            <param name="deaf">Whether the member is to be deafened.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.ModifyAsync(System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.Nullable{System.Boolean},System.Nullable{System.Boolean},DSharpPlus.Entities.DiscordChannel,System.String)">
            <summary>
            Modifies this member.
            </summary>
            <param name="nickname">Nickname to set for this member.</param>
            <param name="roles">Roles to set for this member.</param>
            <param name="mute">Whether the member is to be muted in voice.</param>
            <param name="deaf">Whether the member is to be deafened in voice.</param>
            <param name="voice_channel">Voice channel to put the member into.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.GrantRoleAsync(DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Grants a role to the member. 
            </summary>
            <param name="role">Role to grant.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.RevokeRoleAsync(DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Revokes a role from a member.
            </summary>
            <param name="role">Role to revoke.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.ReplaceRolesAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Sets the member's roles to ones specified.
            </summary>
            <param name="roles">Roles to set.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.BanAsync(System.Int32,System.String)">
            <summary>
            Bans a this member from their guild.
            </summary>
            <param name="delete_message_days">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.RemoveAsync(System.String)">
            <summary>
            Kicks this member from their guild.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.PlaceInAsync(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Moves this member to the specified voice channel
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.PermissionsIn(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Calculates permissions in a given channel for this member.
            </summary>
            <param name="channel">Channel to calculate permissions for.</param>
            <returns>Calculated permissions for this member in the channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.ToString">
            <summary>
            Returns a string representation of this member.
            </summary>
            <returns>String representation of this member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMember"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.Equals(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMember"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordMember"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordMember"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordMember"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.op_Equality(DSharpPlus.Entities.DiscordMember,DSharpPlus.Entities.DiscordMember)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMember"/> objects are equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.op_Inequality(DSharpPlus.Entities.DiscordMember,DSharpPlus.Entities.DiscordMember)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMember"/> objects are not equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessage">
            <summary>
            Represents a Discord text message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Channel">
            <summary> 
            Gets the channel in which the message was sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.ChannelId">
            <summary>
            Gets ID of the channel in which the message was sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Author">
            <summary>
            Gets the user or member that sent the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Content">
            <summary>
            Gets the message's content.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Timestamp">
            <summary>
            Gets the message's creation timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.EditedTimestamp">
            <summary>
            Gets the message's edit timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.IsTTS">
            <summary>
            Gets whether the message is a text-to-speech message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionEveryone">
            <summary>
            Gets whether the message mentions everyone.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionedUsers">
            <summary>
            Gets users or members mentioned by this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionedRoles">
            <summary>
            Gets roles mentioned by this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionedChannels">
            <summary>
            Gets channels mentioned by this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Attachments">
            <summary>
            Gets files attached to this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Embeds">
            <summary>
            Gets embeds attached to this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Reactions">
            <summary>
            Gets reactions used on this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Pinned">
            <summary>
            Gets whether the message is pinned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.WebhookId">
            <summary>
            Gets the id of the webhook that generated this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.WebhookMessage">
            <summary>
            Gets whether the message originated from a webhook.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <param name="embed">New embed.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteAsync(System.String)">
            <summary>
            Deletes the message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.PinAsync">
            <summary>
            Pins the message in its channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.UnpinAsync">
            <summary>
            Unpins the message in its channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondAsync(System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message.
            </summary>
            <param name="content">Message content to respond with.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondWithFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message with a file.
            </summary>
            <param name="file_data">Stream containing the data to attach to the message as a file.</param>
            <param name="file_name">Name of the file to be attached.</param>
            <param name="content">Message content to respond with.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondWithFileAsync(System.IO.FileStream,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message with a file.
            </summary>
            <param name="file_data">Stream containing the data to attach to the message as a file.</param>
            <param name="content">Message content to respond with.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondWithFileAsync(System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message with a file.
            </summary>
            <param name="file_path">Path to the file to be attached to the message.</param>
            <param name="content">Message content to respond with.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondWithFilesAsync(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.Boolean,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message with several files.
            </summary>
            <param name="files">A filename to data stream mapping.</param>
            <param name="content">Message content to respond with.</param>
            <param name="tts">Whether the message is to be read using TTS.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.CreateReactionAsync(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Creates a reaction to this message
            </summary>
            <param name="emoji">The emoji you want to react with, either an emoji or name:id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteOwnReactionAsync(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Deletes your own reaction
            </summary>
            <param name="emoji">Emoji for the reaction you want to remove, either an emoji or name:id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteReactionAsync(DSharpPlus.Entities.DiscordEmoji,DSharpPlus.Entities.DiscordUser,System.String)">
            <summary>
            Deletes another user's reaction.
            </summary>
            <param name="emoji">Emoji for the reaction you want to remove, either an emoji or name:id</param>
            <param name="user">Member you want to remove the reaction for</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.GetReactionsAsync(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Gets users that reacted with this emoji
            </summary>
            <param name="emoji">Emoji to react with.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteAllReactionsAsync(System.String)">
            <summary>
            Deletes all reactions for this message
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.AcknowledgeAsync">
            <summary>
            Acknowledges the message. This is available to user tokens only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ToString">
            <summary>
            Returns a string representation of this message.
            </summary>
            <returns>String representation of this message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMessage"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.Equals(DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMessage"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordMessage"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordMessage"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.op_Equality(DSharpPlus.Entities.DiscordMessage,DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMessage"/> objects are equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.op_Inequality(DSharpPlus.Entities.DiscordMessage,DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMessage"/> objects are not equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.MessageType">
            <summary>
            Indicates the type of the message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.Default">
            <summary>
            Indicates a regular message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.RecipientAdd">
            <summary>
            Message indicating a recipient was added to a group direct message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.RecipientRemove">
            <summary>
            Message indicating a recipient was removed from a group direct message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.Call">
            <summary>
            Message indicating a call.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.ChannelNameChange">
            <summary>
            Message indicating a group direct message channel rename.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.ChannelIconChange">
            <summary>
            Message indicating a group direct message channel icon change.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.ChannelPinnedMessage">
            <summary>
            USER pinned a message to this channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MessageType.GuildMemberJoin">
            <summary>
            Message when a guild member joins. Most frequently seen in newer, smaller guilds.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordOverwrite">
            <summary>
            Represents a permission overwrite for a channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwrite.Type">
            <summary>
            Gets the type of the overwrite. Either "role" or "member".
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwrite.Allow">
            <summary>
            Gets the allowed permission set.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwrite.Deny">
            <summary>
            Gets the denied permission set.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwrite.CheckPermission(DSharpPlus.Permissions)">
            <summary>
            Checks whether given permissions are allowed, denied, or not set.
            </summary>
            <param name="permission">Permissions to check.</param>
            <returns>Whether given permissions are allowed, denied, or not set.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordPresence">
            <summary>
            Represents a user presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.User">
            <summary>
            Gets the user that owns this presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Game">
            <summary>
            Gets the game this user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Status">
            <summary>
            Gets this user's status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Guild">
            <summary>
            Gets the guild for which this presence was set.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordReaction">
            <summary>
            Represents a reaction to a message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordReaction.Count">
            <summary>
            Gets the total number of users who reacted with this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordReaction.IsMe">
            <summary>
            Gets whether the current user reacted with this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordReaction.Emoji">
            <summary>
            Gets the emoji used to react to this message.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordRole">
            <summary>
            Represents a discord role, to which users can be assigned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Name">
            <summary>
            Gets the name of this role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Color">
            <summary>
            Gets the color of this role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IsHoisted">
            <summary>
            Gets whether this role is hoisted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Position">
            <summary>
            Gets the position of this role in the role hierarchy.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Permissions">
            <summary>
            Gets the permissions set for this role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IsManaged">
            <summary>
            Gets whether this role is managed by an integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IsMentionable">
            <summary>
            Gets whether this role is mentionable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Mention">
            <summary>
            Gets a mention string for this role. If the role is mentionable, this string will mention all the users that belong to this role.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.CheckPermission(DSharpPlus.Permissions)">
            <summary>
            Checks whether this role has specific permissions.
            </summary>
            <param name="permission">Permissions to check for.</param>
            <returns>Whether the permissions are allowed or not.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.ToString">
            <summary>
            Returns a string representation of this role.
            </summary>
            <returns>String representation of this role.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordRole"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.Equals(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordRole"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordRole"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordRole"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordRole"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.op_Equality(DSharpPlus.Entities.DiscordRole,DSharpPlus.Entities.DiscordRole)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordRole"/> objects are equal.
            </summary>
            <param name="e1">First role to compare.</param>
            <param name="e2">Second role to compare.</param>
            <returns>Whether the two roles are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.op_Inequality(DSharpPlus.Entities.DiscordRole,DSharpPlus.Entities.DiscordRole)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordRole"/> objects are not equal.
            </summary>
            <param name="e1">First role to compare.</param>
            <param name="e2">Second role to compare.</param>
            <returns>Whether the two roles are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordUser">
            <summary>
            Represents a Discord user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Username">
            <summary>
            Gets this user's username.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Discriminator">
            <summary>
            Gets the user's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.AvatarHash">
            <summary>
            Gets the user's avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.AvatarUrl">
            <summary>
            Gets the user's avatar URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.DefaultAvatarUrl">
            <summary>
            Gets the URL of default avatar for this user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.IsBot">
            <summary>
            Gets whether the user is a bot.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.MfaEnabled">
            <summary>
            Gets whether the user has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Verified">
            <summary>
            Gets whether the user is verified.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Email">
            <summary>
            Gets the user's email address.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Mention">
            <summary>
            Gets the user's mention string.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.IsCurrent">
            <summary>
            Gets whether this user is the Client which created this object.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.UnbanAsync(DSharpPlus.Entities.DiscordGuild,System.String)">
            <summary>
            Unbans this user from a guild.
            </summary>
            <param name="guild">Guild to unban this user from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Presence">
            <summary>
            Gets this user's presence.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.GetAvatarUrl(DSharpPlus.ImageFormat,System.UInt16)">
            <summary>
            Gets the user's avatar URL, in requested format and size.
            </summary>
            <param name="fmt">Format of the avatar to get.</param>
            <param name="size">Maximum size of the avatar. Must be a power of two, minimum 16, maximum 2048.</param>
            <returns>URL of the user's avatar.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.ToString">
            <summary>
            Returns a string representation of this user.
            </summary>
            <returns>String representation of this user.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordUser"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.Equals(DSharpPlus.Entities.DiscordUser)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordUser"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordUser"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordUser"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordUser"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.op_Equality(DSharpPlus.Entities.DiscordUser,DSharpPlus.Entities.DiscordUser)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordUser"/> objects are equal.
            </summary>
            <param name="e1">First user to compare.</param>
            <param name="e2">Second user to compare.</param>
            <returns>Whether the two users are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.op_Inequality(DSharpPlus.Entities.DiscordUser,DSharpPlus.Entities.DiscordUser)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordUser"/> objects are not equal.
            </summary>
            <param name="e1">First user to compare.</param>
            <param name="e2">Second user to compare.</param>
            <returns>Whether the two users are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordVoiceRegion">
            <summary>
            Represents information about a Discord voice server region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.Id">
            <summary>
            Gets the unique ID for the region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.Name">
            <summary>
            Gets the name of the region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.SampleHostname">
            <summary>
            Gets an example server hostname for this region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.SamplePort">
            <summary>
            Gets an example server port for this region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsVIP">
            <summary>
            Gets whether this is a VIP-only region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.Optimal">
            <summary>
            Gets whether this region is the most optimal for the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsDeprecated">
            <summary>
            Gets whether this voice region is deprecated.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsCustom">
            <summary>
            Gets whether this is a custom voice region.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordVoiceState">
            <summary>
            Represents a Discord voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.GuildId">
            <summary>
            Gets ID of the guild this voice state is associated with.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Guild">
            <summary>
            Gets the guild associated with this voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.ChannelId">
            <summary>
            Gets ID of the channel this user is connected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Channel">
            <summary>
            Gets the channel this user is connected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.UserId">
            <summary>
            Gets ID of the user to which this voice state belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.User">
            <summary>
            Gets the user associated with this voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.SessionId">
            <summary>
            Gets ID of the session of this voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Deaf">
            <summary>
            Gets whether this user is deafened.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Mute">
            <summary>
            Gets whether this user is muted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.SelfDeaf">
            <summary>
            Gets whether this user is locally deafened.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.SelfMute">
            <summary>
            Gets whether this user is locally muted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Suppress">
            <summary>
            Gets whether the current user has suppressed this user.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordWebhook">
            <summary>
            Represents information about a Discord webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.GuildId">
            <summary>
            Gets the ID of the guild this webhook belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.ChannelId">
            <summary>
            Gets the ID of the channel this webhook belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.User">
            <summary>
            Gets the user this webhook was created by.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.Name">
            <summary>
            Gets the default name of this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.AvatarHash">
            <summary>
            Gets hash of the default avatar for this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.AvatarUrl">
            <summary>
            Gets the default avatar url for this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.Token">
            <summary>
            Gets the secure token of this webhook.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ModifyAsync(System.String,System.String)">
            <summary>
            Modifies this webhook.
            </summary>
            <param name="name">New default name for this webhook.</param>
            <param name="base64avatar"></param>
            <returns>The modified webhook.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.DeleteAsync">
            <summary>
            Permanently deletes this webhook.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ExecuteAsync(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Executes this webhook.
            </summary>
            <param name="content">The contents of the message to send.</param>
            <param name="username">Username to use for this message.</param>
            <param name="avatar_url">Url of the avatar to use for this message.</param>
            <param name="tts">Whether the message is to be spoken aloud.</param>
            <param name="embeds">Embeds to attach to the message being sent.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ExecuteSlackAsync(System.String)">
            <summary>
            Executes this webhook in Slack compatibility mode.
            </summary>
            <param name="json">JSON containing Slack-compatible payload for this webhook.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ExecuteGithubAsync(System.String)">
            <summary>
            Executes this webhook in GitHub compatibility mode.
            </summary>
            <param name="json">JSON containing GitHub-compatible payload for this webhook.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.Equals(DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordWebhook"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.op_Equality(DSharpPlus.Entities.DiscordWebhook,DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> objects are equal.
            </summary>
            <param name="e1">First webhook to compare.</param>
            <param name="e2">Second webhook to compare.</param>
            <returns>Whether the two webhooks are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.op_Inequality(DSharpPlus.Entities.DiscordWebhook,DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> objects are not equal.
            </summary>
            <param name="e1">First webhook to compare.</param>
            <param name="e2">Second webhook to compare.</param>
            <returns>Whether the two webhooks are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.Optional`1">
            <summary>
            Represents a value which may or may not have a value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:DSharpPlus.Entities.Optional`1.HasValue">
            <summary>
            Gets whether this <see cref="T:DSharpPlus.Entities.Optional`1"/> has a value.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.Optional`1.Value">
            <summary>
            Gets the value of this <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:DSharpPlus.Entities.Optional`1"/> with specified value.
            </summary>
            <param name="value">Value of this option.</param>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.ToString">
            <summary>
            Returns a string representation of this optional value.
            </summary>
            <returns>String representation of this optional value.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.Optional`1"/> (or its value) are equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.Optional`1"/> or its value.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.Equals(DSharpPlus.Entities.Optional{`0})">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.Optional`1"/> is equal to another <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.Optional`1"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.Optional`1"/> is equal to this <see cref="T:DSharpPlus.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.Equals(`0)">
            <summary>
            Checks whether the value of this <see cref="T:DSharpPlus.Entities.Optional`1"/> is equal to specified object.
            </summary>
            <param name="e">Object to compare to.</param>
            <returns>Whether the object is equal to the value of this <see cref="T:DSharpPlus.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.Optional`1"/>.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.SnowflakeObject">
            <summary>
            Represents an object in Discord API.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.SnowflakeObject.Id">
            <summary>
            Gets the ID of this object.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.SnowflakeObject.CreationTimestamp">
            <summary>
            Gets the date and time this object was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.SnowflakeObject.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="T:DSharpPlus.ChannelType">
            <summary>
            Represents a channel's type.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Text">
            <summary>
            Indicates that this is a text channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Private">
            <summary>
            Indicates that this is a private channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Voice">
            <summary>
            Indicates that this is a voice channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Group">
            <summary>
            Indicates that this is a group direct message channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Category">
            <summary>
            Indicates that this is a channel category
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Unknown">
            <summary>
            Indicates unknown channel type.
            </summary>
        </member>
        <member name="T:DSharpPlus.LogLevel">
            <summary>
            Represents information about log's verbosity level.
            </summary>
        </member>
        <member name="F:DSharpPlus.LogLevel.Debug">
            <summary>
            Signifies a debug-level message.
            </summary>
        </member>
        <member name="F:DSharpPlus.LogLevel.Info">
            <summary>
            Signifies info-level message.
            </summary>
        </member>
        <member name="F:DSharpPlus.LogLevel.Warning">
            <summary>
            Signifies warning-level message.
            </summary>
        </member>
        <member name="F:DSharpPlus.LogLevel.Error">
            <summary>
            Signifies error-level message.
            </summary>
        </member>
        <member name="F:DSharpPlus.LogLevel.Critical">
            <summary>
            Signifies critical error-level message.
            </summary>
        </member>
        <member name="T:DSharpPlus.MentionType">
            <summary>
            Type of mention being made
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.None">
            <summary>
            No mention (wtf?)
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Username">
            <summary>
            Mentioned Username
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Nickname">
            <summary>
            Mentioned Nickname
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Channel">
            <summary>
            Mentioned Channel
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Role">
            <summary>
            Mentioned Role
            </summary>
        </member>
        <member name="M:DSharpPlus.PermissionMethods.HasPermission(DSharpPlus.Permissions,DSharpPlus.Permissions)">
            <summary>
            Calculates whether this permission set contains the given permission.
            </summary>
            <param name="p">The permissions to calculate from</param>
            <param name="permission">permission you want to check</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.PermissionLevel">
            <summary>
            Wether a permission is allowed, denied or unset
            </summary>
        </member>
        <member name="F:DSharpPlus.PermissionLevel.Allowed">
            <summary>
            Said permission is Allowed
            </summary>
        </member>
        <member name="F:DSharpPlus.PermissionLevel.Denied">
            <summary>
            Said permission is Denied
            </summary>
        </member>
        <member name="F:DSharpPlus.PermissionLevel.Unset">
            <summary>
            Said permission is Unset
            </summary>
        </member>
        <member name="T:DSharpPlus.Permissions">
            <summary>
            Bitwise permission flags.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.None">
            <summary>
            Indicates no permissions given.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.CreateInstantInvite">
            <summary>
            Allows creation of instant channel invites.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.KickMembers">
            <summary>
            Allows kicking members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.BanMembers">
            <summary>
            Allows banning and unbanning members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.Administrator">
            <summary>
            Enables full access on a given guild. This also overrides other permissions.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageChannels">
            <summary>
            Allows managing channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageGuild">
            <summary>
            Allows managing the guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.AddReactions">
            <summary>
            Allows adding reactions to messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ViewAuditLog">
            <summary>
            Allows viewing audit log entries.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.AccessChannels">
            <summary>
            Allows accessing text and voice channels. Disabling this permission hides channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.SendMessages">
            <summary>
            Allows sending messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.SendTtsMessages">
            <summary>
            Allows sending text-to-speech messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageMessages">
            <summary>
            Allows managing messages of other users.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.EmbedLinks">
            <summary>
            Allows embedding content in messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.AttachFiles">
            <summary>
            Allows uploading files.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ReadMessageHistory">
            <summary>
            Allows reading message history.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.MentionEveryone">
            <summary>
            Allows using @everyone and @here mentions.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseExternalEmojis">
            <summary>
            Allows using emojis from external servers, such as twitch or nitro emojis.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseVoice">
            <summary>
            Allows connecting to voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.Speak">
            <summary>
            Allows speaking in voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.MuteMembers">
            <summary>
            Allows muting other members in voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.DeafenMembers">
            <summary>
            Allows deafening other members in voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.MoveMembers">
            <summary>
            Allows moving voice chat members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseVoiceDetection">
            <summary>
            Allows using voice activation in voice chat. Revoking this will usage of push-to-talk.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ChangeNickname">
            <summary>
            Allows changing of own nickname.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageNicknames">
            <summary>
            Allows managing nicknames of other members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageRoles">
            <summary>
            Allows managing roles in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageWebhooks">
            <summary>
            Allows managing webhooks in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageEmojis">
            <summary>
            Allows managing guild emoji.
            </summary>
        </member>
        <member name="T:DSharpPlus.PermissionStringAttribute">
            <summary>
            Defines a readable name for this permission.
            </summary>
        </member>
        <member name="P:DSharpPlus.PermissionStringAttribute.String">
            <summary>
            Gets the readable name for this permission.
            </summary>
        </member>
        <member name="M:DSharpPlus.PermissionStringAttribute.#ctor(System.String)">
            <summary>
            Defines a readable name for this permission.
            </summary>
            <param name="str">Readable name for this permission.</param>
        </member>
        <member name="T:DSharpPlus.TokenType">
            <summary>
            Token type
            </summary>
        </member>
        <member name="F:DSharpPlus.TokenType.User">
            <summary>
            User token type
            </summary>
        </member>
        <member name="F:DSharpPlus.TokenType.Bot">
            <summary>
            Bot token type
            </summary>
        </member>
        <member name="F:DSharpPlus.TokenType.Bearer">
            <summary>
            Bearer token type
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.BadRequestException">
            <summary>
            Represents an exception thrown when a malformed request is sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.BadRequestException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.BadRequestException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.BadRequestException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.NotFoundException">
            <summary>
            Represents an exception thrown when a requested resource is not found.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.NotFoundException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.NotFoundException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.NotFoundException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.RateLimitException">
            <summary>
            Represents an exception thrown when too many requests are sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.RateLimitException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.RateLimitException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.RateLimitException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.UnauthorizedException">
            <summary>
            Represents an exception thrown when requester doesn't have necessary permissions to complete the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.UnauthorizedException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.UnauthorizedException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.UnauthorizedException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="T:DSharpPlus.Formatter">
            <summary>
            Contains markdown formatting helpers.
            </summary>
        </member>
        <member name="M:DSharpPlus.Formatter.BlockCode(System.String,System.String)">
            <summary>
            Creates a block of code.
            </summary>
            <param name="content">Contents of the block.</param>
            <param name="language">Language to use for highlighting.</param>
            <returns>Formatted block of code.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.InlineCode(System.String)">
            <summary>
            Creates inline code snippet.
            </summary>
            <param name="content">Contents of the snippet.</param>
            <returns>Formatted inline code snippet.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Bold(System.String)">
            <summary>
            Creates bold text.
            </summary>
            <param name="content">Text to bolden.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Italic(System.String)">
            <summary>
            Creates italicized text.
            </summary>
            <param name="content">Text to italicize.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Underline(System.String)">
            <summary>
            Creates underlined text.
            </summary>
            <param name="content">Text to underline.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Strike(System.String)">
            <summary>
            Creates strikethrough text.
            </summary>
            <param name="content">Text to strikethrough.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.EmbedlessUrl(System.Uri)">
            <summary>
            Creates a URL that won't create a link preview.
            </summary>
            <param name="url">Url to prevent from being previewed.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.MaskedUrl(System.String,System.Uri,System.String)">
            <summary>
            Creates a masked link. This link will display as specified text, and alternatively provided alt text. This can only be used in embeds.
            </summary>
            <param name="text">Text to display the link as.</param>
            <param name="url">Url that the link will lead to.</param>
            <param name="alt_text">Alt text to display on hover.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Sanitize(System.String)">
            <summary>
            Escapes all markdown formatting from specified text.
            </summary>
            <param name="text">Text to sanitize.</param>
            <returns>Sanitized text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Strip(System.String)">
            <summary>
            Removes all markdown formatting from specified text.
            </summary>
            <param name="text">Text to strip of formatting.</param>
            <returns>Formatting-stripped text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordUser,System.Boolean)">
            <summary>
            Creates a mention for specified user or member. Can optionally specify to resolve nicknames.
            </summary>
            <param name="user">User to create mention for.</param>
            <param name="nickname">Whether the mention should resovle nicknames or not.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Creates a mention for specified channel.
            </summary>
            <param name="channel">Channel to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Creates a mention for specified role.
            </summary>
            <param name="role">Role to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Emoji(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Creates a custom emoji string.
            </summary>
            <param name="emoji">Emoji to display.</param>
            <returns>Formatted emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.AttachedImageUrl(System.String)">
            <summary>
            Creates a url for using attachments in embeds. This can only be used as an Image URL, Thumbnail URL, Author icon URL or Footer icon URL.
            </summary>
            <param name="filename">Name of attached image to display</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.ImageTool">
            <summary>
            Tool to detect image formats and convert from binary data to base64 strings.
            </summary>
        </member>
        <member name="P:DSharpPlus.ImageTool.SourceStream">
            <summary>
            Gets the stream this tool is operating on.
            </summary>
        </member>
        <member name="M:DSharpPlus.ImageTool.#ctor(System.IO.Stream)">
            <summary>
            Creates a new image tool from given stream.
            </summary>
            <param name="stream">Stream to work with.</param>
        </member>
        <member name="M:DSharpPlus.ImageTool.GetFormat">
            <summary>
            Detects the format of this image.
            </summary>
            <returns>Detected format.</returns>
        </member>
        <member name="M:DSharpPlus.ImageTool.GetBase64">
            <summary>
            Converts this image into base64 data format string.
            </summary>
            <returns>Data-scheme base64 string.</returns>
        </member>
        <member name="M:DSharpPlus.ImageTool.Dispose">
            <summary>
            Disposes this image tool.
            </summary>
        </member>
        <member name="T:DSharpPlus.ImageFormat">
            <summary>
            Represents format of an image.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.ClientProperties">
            <summary>
            Represents data for identify payload's client properties.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.OperatingSystem">
            <summary>
            Gets the client's operating system.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.Browser">
            <summary>
            Gets the client's browser.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.Device">
            <summary>
            Gets the client's device.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.Referrer">
            <summary>
            Gets the client's referrer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.ReferringDomain">
            <summary>
            Gets the client's referring domain.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayHello">
            <summary>
            Represents data for a websocket hello payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayHello.HeartbeatInterval">
            <summary>
            Gets the target heartbeat interval (in milliseconds) requested by Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayHello.Trace">
            <summary>
            Gets debug data sent by Discord. This contains a list of servers to which the client is connected.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayIdentify">
            <summary>
            Represents data for websocket identify payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.Token">
            <summary>
            Gets or sets the token used to identify the client to Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.ClientProperties">
            <summary>
            Gets or sets the client's properties.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.Compress">
            <summary>
            Gets or sets whether to encrypt websocket traffic.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.LargeThreshold">
            <summary>
            Gets or sets the member count at which the guild is to be considered large.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.ShardInfo">
            <summary>
            Gets or sets the shard info for this connection.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayResume">
            <summary>
            Represents data for websocket identify payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayResume.Token">
            <summary>
            Gets or sets the token used to identify the client to Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayResume.SessionId">
            <summary>
            Gets or sets the session id used to resume last session.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayResume.SequenceNumber">
            <summary>
            Gets or sets the last received sequence number.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayOpCode">
            <summary>
            Specifies an OP code in a gateway payload.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Dispatch">
            <summary>
            Used for dispatching events.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Heartbeat">
            <summary>
            Used for pinging the gateway or client, to ensure the connection is still alive.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Identify">
            <summary>
            Used for initial handshake with the gateway.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.StatusUpdate">
            <summary>
            Used to update client status.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.VoiceStateUpdate">
            <summary>
            Used to update voice state, when joining, leaving, or moving between voice channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.VoiceServerPing">
            <summary>
            Used for pinging the voice gateway or client, to ensure the connection is still alive.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Resume">
            <summary>
            Used to resume a closed connection.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Reconnect">
            <summary>
            Used to notify the client that it has to reconnect.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.RequestGuildMembers">
            <summary>
            Used to request guild members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.InvalidSession">
            <summary>
            Used to notify the client about an invalidated session.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Hello">
            <summary>
            Used by the gateway upon connecting.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.HeartbeatAck">
            <summary>
            Used to acknowledge a heartbeat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.GuildSync">
            <summary>
            Used to request guild synchronization.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayPayload">
            <summary>
            Represents a websocket payload exchanged between Discord and the client.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.OpCode">
            <summary>
            Gets or sets the OP code of the payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.Data">
            <summary>
            Gets or sets the data of the payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.Sequence">
            <summary>
            Gets or sets the sequence number of the payload. Only present for OP 0.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.EventName">
            <summary>
            Gets or sets the event name of the payload. Only present for OP 0.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.ReadyPayload">
            <summary>
            Represents data for websocket ready event payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.GatewayVersion">
            <summary>
            Gets the gateway version the client is connectected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.DmChannels">
            <summary>
            Gets the private channels available for this shard.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.Guilds">
            <summary>
            Gets the guilds available for this shard.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.SessionId">
            <summary>
            Gets the current session's ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.Trace">
            <summary>
            Gets debug data sent by Discord. This contains a list of servers to which the client is connected.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.ShardInfo">
            <summary>
            Represents data for identify payload's shard info.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ShardInfo.ShardId">
            <summary>
            Gets or sets this client's shard id.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ShardInfo.ShardCount">
            <summary>
            Gets or sets the total shard count for this token.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.StatusUpdate">
            <summary>
            Represents data for websocket status update payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.IdleSince">
            <summary>
            Gets or sets the unix millisecond timestamp of when the user went idle.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.IsAFK">
            <summary>
            Gets or sets whether the user is AFK.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.Status">
            <summary>
            Gets or sets the status of the user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.Game">
            <summary>
            Gets or sets the game the user is playing.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportGame">
            <summary>
            Represents a game a user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Name">
            <summary>
            Gets or sets the name of the game the user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Url">
            <summary>
            Gets or sets the stream URI, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.StreamType">
            <summary>
            Gets or sets the livesteam type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Details">
            <summary>
            Gets or sets the details.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.State">
            <summary>
            Gets or sets game state.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.ApplicationId">
            <summary>
            Gets ID of the application for which this rich presence is for.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Instance">
            <summary>
            Gets or sets instance status.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Party">
            <summary>
            Gets or sets information about the current game's party.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Assets">
            <summary>
            Gets or sets information about assets related to this rich presence.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Timestamps">
            <summary>
            Gets or sets infromation about current game's timestamps.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.Secrets">
            <summary>
            Gets or sets infromation about current game's secret values.
            
            This is a component of the rich presence, and, as such, can only be used by regular users.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportGame.PresenceAssets">
            <summary>
            Represents information about assets attached to a rich presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.PresenceAssets.LargeImage">
            <summary>
            Gets the large image asset ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.PresenceAssets.LargeImageText">
            <summary>
            Gets the large image text.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.PresenceAssets.SmallImage">
            <summary>
            Gets the small image asset ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.PresenceAssets.SmallImageText">
            <summary>
            Gets the small image text.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportGame.GameParty">
            <summary>
            Represents information about rich presence game party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameParty.Id">
            <summary>
            Gets the game party ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameParty.Size">
            <summary>
            Gets the size of the party.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportGame.GameParty.GamePartySize">
            <summary>
            Represents information about party size.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameParty.GamePartySize.Current">
            <summary>
            Gets the current number of players in the party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameParty.GamePartySize.Maximum">
            <summary>
            Gets the maximum party size.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportGame.GameTimestamps">
            <summary>
            Represents information about the game state's timestamps.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameTimestamps.Start">
            <summary>
            Gets the time the game has started.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameTimestamps.End">
            <summary>
            Gets the time the game is going to end.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportGame.GameSecrets">
            <summary>
            Represents information about secret values for the Join, Spectate, and Match actions.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameSecrets.Join">
            <summary>
            Gets the secret value for join action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameSecrets.Match">
            <summary>
            Gets the secret value for match action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportGame.GameSecrets.Spectate">
            <summary>
            Gets the secret value for spectate action.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.VoiceStateUpdate">
            <summary>
            Represents data for websocket voice state update payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.GuildId">
            <summary>
            Gets or sets the guild for which the user is updating their voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.ChannelId">
            <summary>
            Gets or sets the channel user wants to connect to. Null if disconnecting.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.Mute">
            <summary>
            Gets or sets whether the client is muted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.Deafen">
            <summary>
            Gets or sets whether the client is deafened.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.BaseRestRequest">
            <summary>
            Represents a request sent over HTTP.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Url">
            <summary>
            Gets the url to which this request is going to be made.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Method">
            <summary>
            Gets the HTTP method used for this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Headers">
            <summary>
            Gets the headers sent with this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.RateLimitWaitOverride">
            <summary>
            Gets the override for the rate limit bucket wait time.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.RateLimitBucket">
            <summary>
            Gets the rate limit bucket this request is in.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.BaseRestRequest.#ctor(DSharpPlus.BaseDiscordClient,DSharpPlus.Net.RateLimitBucket,System.Uri,DSharpPlus.Net.RestRequestMethod,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:DSharpPlus.Net.BaseRestRequest"/> with specified parameters.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.DiscordClient"/> from which this request originated.</param>
            <param name="bucket">Rate limit bucket to place this request in.</param>
            <param name="url">Uri to which this request is going to be sent to.</param>
            <param name="method">Method to use for this request,</param>
            <param name="headers">Additional headers for this request.</param>
            <param name="ratelimit_wait_override">Override for ratelimit bucket wait time.</param>
        </member>
        <member name="M:DSharpPlus.Net.BaseRestRequest.WaitForCompletionAsync">
            <summary>
            Asynchronously waits for this request to complete.
            </summary>
            <returns>HTTP response to this request.</returns>
        </member>
        <member name="T:DSharpPlus.Net.MultipartWebRequest">
            <summary>
            Represents a multipart HTTP request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.MultipartWebRequest.Values">
            <summary>
            Gets the dictionary of values attached to this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.MultipartWebRequest.Files">
            <summary>
            Gets the dictionary of files attached to this request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RateLimitBucket">
            <summary>
            Represents a rate limit bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.GuildId">
            <summary>
            Gets the Id of the guild bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.ChannelId">
            <summary>
            Gets the Id of the channel bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Route">
            <summary>
            Gets the url by which the requests are bucketed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Method">
            <summary>
            Gets the HTTP request method.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.BucketId">
            <summary>
            Gets the Id of the ratelimit bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Remaining">
            <summary>
            Gets the number of uses left before pre-emptive rate limit is triggered.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Maximum">
            <summary>
            Gets the maximum number of uses within a single bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Reset">
            <summary>
            Gets the timestamp at which the rate limit resets.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.GenerateId(DSharpPlus.Net.RestRequestMethod,System.String,System.String,System.String)">
            <summary>
            Generates an ID for this request bucket.
            </summary>
            <param name="method">Method for this bucket.</param>
            <param name="route">Route for this bucket.</param>
            <param name="guild_id">Guild Id for this bucket.</param>
            <param name="channel_id">Channel Id for this bucket.</param>
            <returns>Bucket Id.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.ToString">
            <summary>
            Returns a string representation of this bucket.
            </summary>
            <returns>String representation of this bucket.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Net.RateLimitBucket"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.Equals(DSharpPlus.Net.RateLimitBucket)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Net.RateLimitBucket"/> is equal to another <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Net.RateLimitBucket"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Net.RateLimitBucket"/> is equal to this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="T:DSharpPlus.Net.RestClient">
            <summary>
            Represents a client used to make REST requests.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RestRequest">
            <summary>
            Represents a non-multipart HTTP request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestRequest.Payload">
            <summary>
            Gets the payload sent with this request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RestRequestMethod">
            <summary>
            Defines the HTTP method to use for an HTTP request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.GET">
            <summary>
            Defines that the request is a GET request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.POST">
            <summary>
            Defines that the request is a POST request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.DELETE">
            <summary>
            Defines that the request is a DELETE request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.PATCH">
            <summary>
            Defines that the request is a PATCH request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.PUT">
            <summary>
            Defines that the request is a PUT request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.HEAD">
            <summary>
            Defines that the request is a HEAD request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RestResponse">
            <summary>
            Represents a response sent by the remote HTTP party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestResponse.ResponseCode">
            <summary>
            Gets the response code sent by the remote party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestResponse.Headers">
            <summary>
            Gets the headers sent by the remote party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestResponse.Response">
            <summary>
            Gets the contents of the response sent by the remote party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Udp.BaseUdpClient.DataAvailable">
            <summary>
            Gets the amount of data available for this client.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.Create">
            <summary>
            Creates a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.Setup(DSharpPlus.Net.Udp.ConnectionEndpoint)">
            <summary>
            Configures the UDP client.
            </summary>
            <param name="endpoint">Endpoint that the client will be communicating with.</param>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.SendAsync(System.Byte[],System.Int32)">
            <summary>
            Sends a datagram.
            </summary>
            <param name="data">Datagram.</param>
            <param name="data_length">Length of the datagram.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.ReceiveAsync">
            <summary>
            Receives a datagram.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.Close">
            <summary>
            Closes and disposes the client.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Udp.ConnectionEndpoint">
            <summary>
            Represents a network connection endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Udp.ConnectionEndpoint.Hostname">
            <summary>
            Gets or sets the hostname associated with this endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Udp.ConnectionEndpoint.Port">
            <summary>
            Gets or sets the port associated with this endpoint.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Udp.IpEndpoint">
            <summary>
            Represents a network connection IP endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Udp.IpEndpoint.Address">
            <summary>
            Gets or sets the hostname associated with this endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Udp.IpEndpoint.Port">
            <summary>
            Gets or sets the port associated with this endpoint.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.BaseWebSocketClient.Create">
            <summary>
            Creates a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.BaseWebSocketClient.ConnectAsync(System.String)">
            <summary>
            Connects to the WebSocket server.
            </summary>
            <param name="uri">The URI of the WebSocket server.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.BaseWebSocketClient.OnConnectAsync">
            <summary>
            Set the Action to call when the connection has been established.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.BaseWebSocketClient.OnDisconnectAsync(DSharpPlus.EventArgs.SocketCloseEventArgs)">
            <summary>
            Set the Action to call when the connection has been terminated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.BaseWebSocketClient.SendMessage(System.String)">
            <summary>
            Send a message to the WebSocket server.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.Create">
            <summary>
            Creates a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.ConnectAsync(System.String)">
            <summary>
            Connects to the WebSocket server.
            </summary>
            <param name="uri">The URI of the WebSocket server.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.OnConnectAsync">
            <summary>
            Set the Action to call when the connection has been established.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.OnDisconnectAsync(DSharpPlus.EventArgs.SocketCloseEventArgs)">
            <summary>
            Set the Action to call when the connection has been terminated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.SendMessage(System.String)">
            <summary>
            Send a message to the WebSocket server.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="T:DSharpPlus.RingBuffer`1">
            <summary>
            A circular buffer collection.
            </summary>
            <typeparam name="T">Type of elements within this ring buffer.</typeparam>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.CurrentIndex">
            <summary>
            Gets the current index of the buffer items.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.Capacity">
            <summary>
            Gets the capacity of this ring buffer.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.Count">
            <summary>
            Gets the number of items in this ring buffer.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.IsReadOnly">
            <summary>
            Gets whether this ring buffer is read-only.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.InternalBuffer">
            <summary>
            Gets or sets the internal collection of items.
            </summary>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates a new ring buffer with specified size.
            </summary>
            <param name="size">Size of the buffer to create.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new ring buffer, filled with specified elements.
            </summary>
            <param name="elements">Elements to fill the buffer with.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new ring buffer, filled with specified elements, and starting at specified index.
            </summary>
            <param name="elements">Elements to fill the buffer with.</param>
            <param name="index">Starting element index.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Add(`0)">
            <summary>
            Inserts an item into this ring buffer.
            </summary>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.TryGet(System.Func{`0,System.Boolean},`0@)">
            <summary>
            Gets first item from the buffer that matches the predicate.
            </summary>
            <param name="predicate">Predicate used to find the item.</param>
            <param name="item">Item that matches the predicate, or default value for the type of the items in this ring buffer, if one is not found.</param>
            <returns>Whether an item that matches the predicate was found or not.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Clear">
            <summary>
            Clears this ring buffer and resets the current item index.
            </summary>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Contains(`0)">
            <summary>
            Checks whether given item is present in the buffer. This method is not implemented. Use <see cref="M:DSharpPlus.RingBuffer`1.Contains(System.Func{`0,System.Boolean})"/> instead.
            </summary>
            <param name="item">Item to check for.</param>
            <returns>Whether the buffer contains the item.</returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Contains(System.Func{`0,System.Boolean})">
            <summary>
            Checks whether given item is present in the buffer using given predicate to find it.
            </summary>
            <param name="predicate">Predicate used to check for the item.</param>
            <returns>Whether the buffer contains the item.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies this ring buffer to target array, attempting to maintain the order of items within.
            </summary>
            <param name="array">Target array.</param>
            <param name="index">Index starting at which to copy the items to.</param>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Remove(`0)">
            <summary>
            Removes an item from the buffer. This method is not implemented. Use <see cref="M:DSharpPlus.RingBuffer`1.Remove(System.Func{`0,System.Boolean})"/> instead.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether an item was removed or not.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes an item from the buffer using given predicate to find it.
            </summary>
            <param name="predicate">Predicate used to find the item.</param>
            <returns>Whether an item was removed or not.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator for this ring buffer.
            </summary>
            <returns>Enumerator for this ring buffer.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for this ring buffer.
            </summary>
            <returns>Enumerator for this ring buffer.</returns>
        </member>
        <member name="T:DSharpPlus.Utilities">
            <summary>
            Various Discord-related utilities.
            </summary>
        </member>
        <member name="P:DSharpPlus.Utilities.VersionHeader">
            <summary>
            Gets the version of the library
            </summary>
        </member>
        <member name="M:DSharpPlus.Utilities.GetDateTimeOffset(System.Int64)">
            <summary>
            Helper method to create a <see cref="T:System.DateTimeOffset"/> from Unix time seconds for targets that do not support this natively.
            </summary>
            <param name="unixtime">Unix time seconds to convert.</param>
            <returns>Calculated <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.GetUnixTime(System.DateTimeOffset)">
            <summary>
            Helper method to calculate Unix time seconsd from a <see cref="T:System.DateTimeOffset"/> for targets that do not support this natively.
            </summary>
            <param name="dto"><see cref="T:System.DateTimeOffset"/> to calculate Unix time for.</param>
            <returns>Calculated Unix time.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.ToPermissionString(DSharpPlus.Permissions)">
            <summary>
            Converts this <see cref="T:DSharpPlus.Permissions"/> into human-readable format.
            </summary>
            <param name="perm">Permissions enumeration to convert.</param>
            <returns>Human-readable permissions.</returns>
        </member>
    </members>
</doc>
